<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-07-04T03:01:19.787Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>洛谷P1124题解——文件压缩</title>
    <link href="http://example.com/2023/06/04/%E6%B4%9B%E8%B0%B7P1124%E9%A2%98%E8%A7%A3%E2%80%94%E2%80%94%E6%96%87%E4%BB%B6%E5%8E%8B%E7%BC%A9/"/>
    <id>http://example.com/2023/06/04/%E6%B4%9B%E8%B0%B7P1124%E9%A2%98%E8%A7%A3%E2%80%94%E2%80%94%E6%96%87%E4%BB%B6%E5%8E%8B%E7%BC%A9/</id>
    <published>2023-06-03T17:57:22.370Z</published>
    <updated>2022-07-04T03:01:19.787Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>原题链接：<a href="https://www.luogu.com.cn/problem/P1124">P1124-文件压缩</a></p><p>原题：</p><p>题目描述</p><p>该算法具体如下：对一个长度为 <code>n</code> 的字符串 <code>S</code>，首先根据它构造 <code>n</code> 个字符串，其中第 <code>i</code> 个字符串由将 <code>S</code> 的前 <code>i−1</code> 个字符置于末尾得到。然后把这 <code>n</code> 个字符串按照首字符从小到大排序，如果两个字符串的首字符相等，则按照它们在 <code>S</code> 中的位置从小到大排序。排序后的字符串的尾字符可以组成一个新的字符串 <code>S′</code>，它的长度也是 <code>n</code>，并且包含了 <code>S</code> 中的每一个字符。最后输出 <code>S′</code> 以及 <code>S</code> 的首字符在 <code>S′</code> 中的位置 <code>p</code>。</p><p>举例：S 是 <code>example</code></p><ol><li><p>构造 <code>n</code> 个字符串。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">example</span><br><span class="line">xamplee</span><br><span class="line">ampleex</span><br><span class="line">mpleexa</span><br><span class="line">pleexam</span><br><span class="line">leexamp</span><br><span class="line">eexampl</span><br></pre></td></tr></table></figure></li><li><p>将字符串排序。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ampleex</span><br><span class="line">example</span><br><span class="line">eexampl</span><br><span class="line">leexamp</span><br><span class="line">mpleexa</span><br><span class="line">pleexam</span><br><span class="line">xamplee</span><br></pre></td></tr></table></figure></li><li><p>压缩结果。</p><p>$$S′&#x3D;xelpame，p&#x3D;7$$</p></li></ol><p>在读题过程中不难发现，当我们将压缩结果按字典序排列时可以得到$2$中首字母序列，从而我们可以得到每个字母的前驱或者后继。因此我们可以利用这个规律来找到原字符串。这里我们选择先找到尾字符，然后找每个字母的前驱，最后反向输出，这样做的原因是正向寻找时按照压缩字符串寻找，无规律，容易乱序，而逆向寻找靠排序串，不致乱序。</p><h2 id="c-实现"><a href="#c-实现" class="headerlink" title="c++实现"></a>c++实现</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span><span class="comment">//可食用头文件</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,shou,now;<span class="comment">//n为S串长度，shou即为题目中p，首字母所在压缩后的位置，now为现在进行到哪个位置了</span></span><br><span class="line">    cin&gt;&gt;n;<span class="comment">//输入</span></span><br><span class="line">    <span class="type">char</span> a[n],b[n],ans[n];<span class="comment">//a——压缩串，b——字典序串，ans——答案串</span></span><br><span class="line">    cin&gt;&gt;a&gt;&gt;shou;<span class="comment">//万能cin</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)b[i]=a[i];<span class="comment">//a带给b</span></span><br><span class="line">    <span class="built_in">sort</span>(b,b+n);<span class="comment">//自动排序</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)<span class="comment">//首先按首字母找到最后一个字母</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(b[i]==a[shou<span class="number">-1</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            now=i;</span><br><span class="line">            b[i]=<span class="string">&#x27;)&#x27;</span>;<span class="comment">//标记，退出</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ans[<span class="number">0</span>]=a[now];<span class="comment">//计入答案</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)<span class="comment">//ans[i]表示倒数第i+1个字母</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=n<span class="number">-1</span>;j&gt;=<span class="number">0</span>;j--)<span class="comment">//从后往前搜到第一个与原char串匹配的字典序串</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(b[j]==a[now])</span><br><span class="line">            &#123;</span><br><span class="line">                now=j;<span class="comment">//更改现在所在位置，即跳到前一个字母</span></span><br><span class="line">                ans[i]=a[now];<span class="comment">//计入答案</span></span><br><span class="line">                b[j]=<span class="string">&#x27;)&#x27;</span>;<span class="comment">//标记</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)cout&lt;&lt;ans[i];<span class="comment">//倒序输出</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="python实现"><a href="#python实现" class="headerlink" title="python实现"></a>python实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">n=<span class="built_in">int</span>(<span class="built_in">input</span>())<span class="comment">#字符串长度</span></span><br><span class="line">s=<span class="built_in">input</span>()<span class="comment">#压缩串</span></span><br><span class="line">pos=<span class="built_in">int</span>(<span class="built_in">input</span>())<span class="comment">#压缩串中首字母位置</span></span><br><span class="line">pos=pos-<span class="number">1</span></span><br><span class="line">box=[]<span class="comment">#压缩串得到列表</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    box.append(s[i])</span><br><span class="line">boxs=box.copy()</span><br><span class="line">boxs.sort()<span class="comment">#字典序列表</span></span><br><span class="line">res=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,n):</span><br><span class="line">    <span class="keyword">if</span> boxs[i]==box[pos]:</span><br><span class="line">        pos=i</span><br><span class="line">        boxs[i]=<span class="string">&#x27;0&#x27;</span></span><br><span class="line">        res.append(box[pos])</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> boxs[i]==box[pos]:</span><br><span class="line">            pos=i</span><br><span class="line">            res.append(box[pos])</span><br><span class="line">            boxs[i]=<span class="string">&#x27;0&#x27;</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">            </span><br><span class="line">ans=<span class="string">&quot;&quot;</span></span><br><span class="line">res.reverse()</span><br><span class="line"><span class="keyword">for</span> each <span class="keyword">in</span> res:</span><br><span class="line">    ans=ans+each</span><br><span class="line"><span class="built_in">print</span>(ans)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;原题链接：&lt;a href=&quot;https://www.luogu.com.cn/problem/P1124&quot;&gt;P1124-文件压缩&lt;/a&gt;&lt;/</summary>
      
    
    
    
    <category term="题解" scheme="http://example.com/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
    <category term="洛谷" scheme="http://example.com/tags/%E6%B4%9B%E8%B0%B7/"/>
    
    <category term="c++" scheme="http://example.com/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>C语言函数</title>
    <link href="http://example.com/2023/06/04/function%E2%80%94%E2%80%94C%E8%AF%AD%E8%A8%80%E5%87%BD%E6%95%B0/"/>
    <id>http://example.com/2023/06/04/function%E2%80%94%E2%80%94C%E8%AF%AD%E8%A8%80%E5%87%BD%E6%95%B0/</id>
    <published>2023-06-03T17:57:22.360Z</published>
    <updated>2023-03-24T03:21:25.410Z</updated>
    
    <content type="html"><![CDATA[<h2 id="函数简介："><a href="#函数简介：" class="headerlink" title="函数简介："></a>函数简介：</h2><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>和数学上的函数定义类似，C语言中的函数就是对给定的输入变量$x$,返回对应的函数值$y$,或者对$x$进行一定的操作。</p><p>不同的是在C语言的函数当中，$x$可以为$\emptyset$,即没有函数的输入，只是在函数体中进行一定的操作。</p><p>最常见的函数就是<code>main</code>函数，之前讲过每个程序都需要有一个<code>main</code>函数作为程序入口，程序所进行的操作实际就是<code>main</code>函数里的内容。</p><p>函数最大的意义就是可以进行模块化编程，简单来说就是对同一类问题可以只用一个函数求解，类比数学中的函数就是我们对确定的$f(x)$可以只编写一个程序，无论$x$的取值，我们都可以用这一个程序来求解，这一个程序就可以成为一个模块，而需要求解的问题就可以通过对其几个子问题模块的组合来解决。</p><h3 id="函数分类"><a href="#函数分类" class="headerlink" title="函数分类"></a>函数分类</h3><h4 id="库函数"><a href="#库函数" class="headerlink" title="库函数"></a>库函数</h4><p>库函数包含在各个头文件里，比如平时最常用的<code>scanf</code>,<code>printf</code>也是函数（包含在<code>&lt;stdio.h&gt;</code>库中），除此之外<code>&lt;cmath&gt;</code>头文件中有定义好的各种数学运算函数，如<code>sqrt(平方根)</code>，<code>floor(下取整)</code>，<code>pow(求幂)</code>等等，还有<code>&lt;cstring&gt;</code>等各种库，只需要记住最常用的一些即可。标准库中的函数我们所要做的就是在程序中包含头文件之后直接调用。</p><h4 id="用户自定义函数"><a href="#用户自定义函数" class="headerlink" title="用户自定义函数"></a>用户自定义函数</h4><p>这是重点部分，自定义函数就是我们去仿照标准库，去实现一些具有我们想要的功能的函数，具体的定义方法，声明方法等后面补充。</p><h4 id="main函数"><a href="#main函数" class="headerlink" title="main函数"></a><code>main</code>函数</h4><p>程序入口，不再赘述。</p><h2 id="函数的使用："><a href="#函数的使用：" class="headerlink" title="函数的使用："></a>函数的使用：</h2><h3 id="函数的声明和定义"><a href="#函数的声明和定义" class="headerlink" title="函数的声明和定义"></a>函数的声明和定义</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">myfunc</span><span class="params">(<span class="type">void</span>)</span>; <span class="comment">// 函数的声明（declaration）</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">myfunc</span><span class="params">(<span class="type">void</span>)</span>  <span class="comment">// 函数的定义（definition） </span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;This is my function...&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数的声明和定义的基本语法如上，声明和定义的区别就是声明告诉了编译器有个函数叫<code>myfunc</code>,但是编译器不一定知道这个函数是做什么的；而定义则不仅告诉了编译器有这个函数，而且告诉了编译器这个函数可以干什么。</p><p>之后我们细看函数定义的语法，<code>void myfunc(void)</code>中，前面的<code>void</code>代表的是返回值类型（Return Type），后面的<code>void</code>代表的是函数参数(Parameters)。函数的返回值可以理解为$y&#x3D;f(x)$，而函数参数就可以理解为$x$,若有多个参数用<code>,</code>隔开。</p><p>返回值类型就是C语言中的数据类型，比如<code>int</code>,<code>float</code>,<code>double</code>,<code>char</code>等等，而参数则可以有多个，对应数学中的多元函数，下面给出一个求圆面积的例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> PI 3.1415926</span></span><br><span class="line"><span class="type">double</span> <span class="title function_">getCircleArea</span><span class="params">(<span class="type">double</span> radius)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">double</span> area = PI * radius * radius;</span><br><span class="line"><span class="keyword">return</span> area;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的是函数定义的返回值类型和在函数体中返回的类型要一致，如上面的例子中，圆面积area是<code>double</code>类型，函数的返回值也是<code>double</code>类型，因此函数体返回的语句为<code>return area</code>.再比如<code>main</code>函数一般为<code>int main()</code>,<code>return 0;</code>。</p><p>回到开始的例子，</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">myfunc</span><span class="params">(<span class="type">void</span>)</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;This is my function...&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之前知道C语言中<code>void</code>代表忽略或者没有，所以这个例子中的函数1.不需要参数。2.没有返回值。</p><h3 id="函数的调用："><a href="#函数的调用：" class="headerlink" title="函数的调用："></a>函数的调用：</h3><h4 id="自定义函数在程序中的结构"><a href="#自定义函数在程序中的结构" class="headerlink" title="自定义函数在程序中的结构"></a>自定义函数在程序中的结构</h4><h5 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数的声明</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 调用函数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数的定义</span></span><br></pre></td></tr></table></figure><p>eg:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">myfunc</span><span class="params">()</span>; <span class="comment">// 声明</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    myfunc();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">myfunc</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// To do ...</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数的声明兼定义</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 调用函数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>eg:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">myfunc</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// To do ...</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    myfunc();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="调用时返回值类型与等号左值相对应"><a href="#调用时返回值类型与等号左值相对应" class="headerlink" title="调用时返回值类型与等号左值相对应"></a>调用时返回值类型与等号左值相对应</h4><p>eg:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PI 3.1415926</span></span><br><span class="line"></span><br><span class="line"><span class="type">double</span> <span class="title function_">getCircleArea</span><span class="params">(<span class="type">double</span> radius)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">double</span> area = PI * radius * radius;</span><br><span class="line"><span class="keyword">return</span> area;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">double</span> radius = <span class="number">4</span>;</span><br><span class="line">    <span class="type">double</span> area = getCircleArea(radius);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="嵌套调用：函数不止在主函数中可以调用，在一个函数中可以调用另一个函数"><a href="#嵌套调用：函数不止在主函数中可以调用，在一个函数中可以调用另一个函数" class="headerlink" title="嵌套调用：函数不止在主函数中可以调用，在一个函数中可以调用另一个函数"></a>嵌套调用：函数不止在主函数中可以调用，在一个函数中可以调用另一个函数</h4><p>eg:见ppt Page.19</p><p>需要注意的是如果函数A在函数B中被调用,A一定要在B的定义之前被声明。</p><h2 id="变量："><a href="#变量：" class="headerlink" title="变量："></a>变量：</h2><h3 id="形参和实参："><a href="#形参和实参：" class="headerlink" title="形参和实参："></a>形参和实参：</h3><p>形参是指函数定义和声明中的参数，而实参是指调用函数时传入的参数</p><p>eg:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> A, <span class="type">int</span> B)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> A + B;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">4</span>, b = <span class="number">5</span>;</span><br><span class="line">    <span class="type">int</span> c = add(a, b);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码中A,B为形参， a,b为实参。（形参和实参可以同名）</p><h3 id="变量的作用域："><a href="#变量的作用域：" class="headerlink" title="变量的作用域："></a>变量的作用域：</h3><p>一般来说，变量的作用域就是定义变量的那一个语句块（那一对大括号之间）。</p><p>eg:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> global;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="keyword">if</span>(a == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上述例子，变量a的作用域是整个main函数，而b，c的作用域则是它们各自所在的if语句块。</p><p>a,b,c都统称局部变量，除此之外，也有特殊变量叫全局变量，它定义在main函数之前，作用域是整个程序。</p><p>注意，自定义函数的参数属于局部变量，它的作用域就是函数体内。</p><h3 id="变量类型："><a href="#变量类型：" class="headerlink" title="变量类型："></a>变量类型：</h3><h4 id="auto和register"><a href="#auto和register" class="headerlink" title="auto和register"></a>auto和register</h4><p>逐渐弃用，看看ppt就行</p><h4 id="static"><a href="#static" class="headerlink" title="static:"></a>static:</h4><p>用在局部变量，延长变量寿命，在函数体中的变量若没有static,每次调用后都会被释放，每次调用时都是重新申请资源，而static修饰后每次调用都是在上次调用的基础上。</p><p>用在全局变量，单文件没影响，多文件本来全局变量是多个文件互通，加static修饰后只在当前文件内可用。</p><h4 id="extern"><a href="#extern" class="headerlink" title="extern:"></a>extern:</h4><p>在其他文件内定义的变量使用前声明时用到extern.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;函数简介：&quot;&gt;&lt;a href=&quot;#函数简介：&quot; class=&quot;headerlink&quot; title=&quot;函数简介：&quot;&gt;&lt;/a&gt;函数简介：&lt;/h2&gt;&lt;h3 id=&quot;函数&quot;&gt;&lt;a href=&quot;#函数&quot; class=&quot;headerlink&quot; title=&quot;函数&quot;&gt;&lt;/a&gt;函</summary>
      
    
    
    
    <category term="语法总结" scheme="http://example.com/categories/%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    
    <category term="C语言" scheme="http://example.com/categories/%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93/C%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="C语言" scheme="http://example.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>C语言输入输出总结</title>
    <link href="http://example.com/2023/06/04/C%E8%AF%AD%E8%A8%80%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E6%80%BB%E7%BB%93/"/>
    <id>http://example.com/2023/06/04/C%E8%AF%AD%E8%A8%80%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E6%80%BB%E7%BB%93/</id>
    <published>2023-06-03T17:57:22.359Z</published>
    <updated>2023-03-09T15:20:29.922Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C语言输入输出总结"><a href="#C语言输入输出总结" class="headerlink" title="C语言输入输出总结"></a>C语言输入输出总结</h1><h3 id="c-——-char-单个字符类型"><a href="#c-——-char-单个字符类型" class="headerlink" title="%c —— char, 单个字符类型"></a>%c —— char, 单个字符类型</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span> <span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> ch; <span class="comment">//或者 unsigned char ch;</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;ch);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,ch);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="d-——-int-十进制整型"><a href="#d-——-int-十进制整型" class="headerlink" title="%d —— int, 十进制整型"></a>%d —— int, 十进制整型</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span> <span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>(拓展：输出时%nd ，等宽输出，宽度为n，不等宽时补空格；%0nd或者%.nd补0)</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span> <span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> n = <span class="number">8</span>;</span><br><span class="line">    <span class="type">int</span> count[n] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">17</span>,<span class="number">18</span>,<span class="number">19</span>,<span class="number">20</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%2d\n&quot;</span>,count[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> 1</span><br><span class="line"> 2</span><br><span class="line"> 3</span><br><span class="line"> 4</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span> <span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> n = <span class="number">8</span>;</span><br><span class="line">    <span class="type">int</span> count[n] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">17</span>,<span class="number">18</span>,<span class="number">19</span>,<span class="number">20</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%02d\n&quot;</span>,count[i]);</span><br><span class="line">       <span class="comment">//或者printf(&quot;%.2d\n&quot;,count[i]);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">01</span><br><span class="line">02</span><br><span class="line">03</span><br><span class="line">04</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td></tr></table></figure><h3 id="ld-——-long-长整型"><a href="#ld-——-long-长整型" class="headerlink" title="%ld —— long, 长整型"></a>%ld —— long, 长整型</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span> <span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">long</span> a;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%ld&quot;</span>,&amp;a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%ld&quot;</span>,a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="lld-——-long-long-长整型"><a href="#lld-——-long-long-长整型" class="headerlink" title="%lld —— long long, 长整型"></a>%lld —— long long, 长整型</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span> <span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> a;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="hd-——-short，短整型"><a href="#hd-——-short，短整型" class="headerlink" title="%hd —— short，短整型"></a>%hd —— short，短整型</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span> <span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">short</span> a;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%hd&quot;</span>,&amp;a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%hd&quot;</span>,a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="（int，long，longlong，short区别）"><a href="#（int，long，longlong，short区别）" class="headerlink" title="（int，long，longlong，short区别）"></a>（int，long，longlong，short区别）</h2><p>int                -2147483648~2147483647(10位十进制数)</p><p>short            -32768~32767(5位十进制数)</p><p>long             -2147483648~2147483647(10位十进制数)</p><p>long long     -9223372036854775808~9223372036854775807(20位十进制数)</p><h3 id="f-——float-单精度浮点数"><a href="#f-——float-单精度浮点数" class="headerlink" title="%f ——float, 单精度浮点数"></a>%f ——float, 单精度浮点数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">float</span> a;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%f&quot;</span>,&amp;a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%f&quot;</span>,a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="lf-——-double-双精度浮点数"><a href="#lf-——-double-双精度浮点数" class="headerlink" title="%lf —— double, 双精度浮点数"></a>%lf —— double, 双精度浮点数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">float</span> a;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>,&amp;a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lf&quot;</span>,a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>(拓展：%.nf或%.nlf可以输出四舍五入后的n位小数)</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;C语言输入输出总结&quot;&gt;&lt;a href=&quot;#C语言输入输出总结&quot; class=&quot;headerlink&quot; title=&quot;C语言输入输出总结&quot;&gt;&lt;/a&gt;C语言输入输出总结&lt;/h1&gt;&lt;h3 id=&quot;c-——-char-单个字符类型&quot;&gt;&lt;a href=&quot;#c-——-char</summary>
      
    
    
    
    <category term="语法总结" scheme="http://example.com/categories/%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    
    <category term="C语言" scheme="http://example.com/categories/%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93/C%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="C语言" scheme="http://example.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
    <category term="语法" scheme="http://example.com/tags/%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2023/06/04/hello-world/"/>
    <id>http://example.com/2023/06/04/hello-world/</id>
    <published>2023-06-03T17:02:33.088Z</published>
    <updated>2022-06-04T03:49:54.208Z</updated>
    
    <content type="html"><![CDATA[<h2 id="经典Hello-World开局"><a href="#经典Hello-World开局" class="headerlink" title="经典Hello World开局"></a>经典Hello World开局</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cout&lt;&lt;&quot;Hello World&quot;&lt;&lt;endl;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;经典Hello-World开局&quot;&gt;&lt;a href=&quot;#经典Hello-World开局&quot; class=&quot;headerlink&quot; title=&quot;经典Hello World开局&quot;&gt;&lt;/a&gt;经典Hello World开局&lt;/h2&gt;&lt;figure class=&quot;highli</summary>
      
    
    
    
    <category term="杂谈" scheme="http://example.com/categories/%E6%9D%82%E8%B0%88/"/>
    
    
    <category term="hello world" scheme="http://example.com/tags/hello-world/"/>
    
  </entry>
  
  <entry>
    <title>VMware 让虚拟机通过主机代理上网</title>
    <link href="http://example.com/2023/06/03/VMware-%E8%AE%A9%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%80%9A%E8%BF%87%E4%B8%BB%E6%9C%BA%E4%BB%A3%E7%90%86%E4%B8%8A%E7%BD%91/"/>
    <id>http://example.com/2023/06/03/VMware-%E8%AE%A9%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%80%9A%E8%BF%87%E4%B8%BB%E6%9C%BA%E4%BB%A3%E7%90%86%E4%B8%8A%E7%BD%91/</id>
    <published>2023-06-03T15:58:33.000Z</published>
    <updated>2023-06-03T16:07:56.157Z</updated>
    
    <content type="html"><![CDATA[<p>Ubuntu 20.04.6 LTS</p><p>VMware Workstation 17 Pro 17.0.0</p><p class='item-img' data-src='/..%5Cimages%5C%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%80%82%E9%85%8D%E5%99%A8%E8%AE%BE%E7%BD%AE.png'><img src="/..%5Cimages%5C%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%80%82%E9%85%8D%E5%99%A8%E8%AE%BE%E7%BD%AE.png" alt="虚拟机网络适配器设置"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Ubuntu 20.04.6 LTS&lt;/p&gt;
&lt;p&gt;VMware Workstation 17 Pro 17.0.0&lt;/p&gt;
&lt;p class=&#39;item-img&#39; data-src=&#39;/..%5Cimages%5C%E8%99%9A%E6%8B%9F%E6%9C%BA%E</summary>
      
    
    
    
    
  </entry>
  
</feed>
