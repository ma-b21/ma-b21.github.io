<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>J&#39;s Blog</title>
  
  
  <link href="https://ma-b21.github.io/atom.xml" rel="self"/>
  
  <link href="https://ma-b21.github.io/"/>
  <updated>2023-07-05T12:30:01.627Z</updated>
  <id>https://ma-b21.github.io/</id>
  
  <author>
    <name>Jiuer Ma</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>xv6-Lab3</title>
    <link href="https://ma-b21.github.io/2023/07/05/Lab3_Report/"/>
    <id>https://ma-b21.github.io/2023/07/05/Lab3_Report/</id>
    <published>2023-07-05T12:21:44.284Z</published>
    <updated>2023-07-05T12:30:01.627Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Lab3-page-tables"><a href="#Lab3-page-tables" class="headerlink" title="Lab3 page tables"></a>Lab3 page tables</h1><h2 id="Speed-up-system-calls"><a href="#Speed-up-system-calls" class="headerlink" title="Speed up system calls"></a>Speed up system calls</h2><h3 id="主要思路"><a href="#主要思路" class="headerlink" title="主要思路"></a>主要思路</h3><p>根据题中所给的<code>Hints</code>以及参考书的<code>Chapter 3</code>,要实现对<code>getpid()</code>的加速，就是将进程的<code>pid</code>信息存放在内核和用户共用的一片存储空间中，从而在<code>ugetpid()</code>的时候程序不用陷入内核态，实现对<code>getpid()</code>的加速。<br>实现流程如下：</p><ul><li>首先在<code>kernel/proc.h</code>中添加如下代码来作为上述共享空间：<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">usyscall</span> *<span class="hljs-title">usyspage</span>;</span>   <span class="hljs-comment">// 用户与内核共享页</span><br></code></pre></td></tr></table></figure></li><li>接着在<code>kernel/proc.c</code>中添加如下代码来为这个页面分配空间并将目标值装入页面：<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-keyword">struct</span> proc*<br><span class="hljs-title function_">allocproc</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>{<br>  ...<br>  <span class="hljs-comment">// Allocate a trapframe page.</span><br>  <span class="hljs-keyword">if</span>((p-&gt;trapframe = (<span class="hljs-keyword">struct</span> trapframe *)kalloc()) == <span class="hljs-number">0</span>){<br>    freeproc(p);<br>    release(&amp;p-&gt;lock);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  }<br><br>  <span class="hljs-comment">// 给共享页分配空间(add)</span><br>  <span class="hljs-keyword">if</span>((p-&gt;usyspage = (<span class="hljs-keyword">struct</span> usyscall *)kalloc()) == <span class="hljs-number">0</span>){<br>    freeproc(p);<br>    release(&amp;p-&gt;lock);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  }<br>  p-&gt;usyspage-&gt;pid = p-&gt;pid;<br><br>  ...<br><br>  <span class="hljs-keyword">return</span> p;<br>}<br></code></pre></td></tr></table></figure></li><li>在销毁进程时要记得将页面空间释放并避免野指针(<code>kernel/proc.c</code>)：<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">void</span><br><span class="hljs-title function_">freeproc</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> proc *p)</span><br>{<br> ...<br><br>  <span class="hljs-keyword">if</span>(p-&gt;usyspage)<br>    kfree((<span class="hljs-type">void</span>*)p-&gt;usyspage);<br>  p-&gt;usyspage = <span class="hljs-number">0</span>;<br><br>  ...<br>}<br></code></pre></td></tr></table></figure></li><li>在页表中建立映射(<code>kernel/proc.c</code>),注意题中要求，该页的权限为用户只读:<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// Create a user page table for a given process, with no user memory,</span><br><span class="hljs-comment">// but with trampoline and trapframe pages.</span><br><span class="hljs-type">pagetable_t</span><br><span class="hljs-title function_">proc_pagetable</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> proc *p)</span><br>{<br>  ...<br><br>  <span class="hljs-comment">// 建立从USYSCALL到p-&gt;usyspage的映射，权限为用户只读</span><br>  <span class="hljs-keyword">if</span>(mappages(pagetable, USYSCALL, PGSIZE,<br>              (uint64)(p-&gt;usyspage), PTE_R | PTE_U) &lt; <span class="hljs-number">0</span>){<br>    uvmfree(pagetable, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  }<br><br>  <span class="hljs-comment">// map the trampoline code (for system call return)</span><br>  <span class="hljs-comment">// at the highest user virtual address.</span><br>  <span class="hljs-comment">// only the supervisor uses it, on the way</span><br>  <span class="hljs-comment">// to/from user space, so not PTE_U.</span><br>  ...<br>}<br></code></pre></td></tr></table></figure></li><li>同样在进程结束释放页表的时候要记得取消映射(<code>kernel/proc.c</code>)：<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// Free a process's page table, and free the</span><br><span class="hljs-comment">// physical memory it refers to.</span><br><span class="hljs-type">void</span><br><span class="hljs-title function_">proc_freepagetable</span><span class="hljs-params">(<span class="hljs-type">pagetable_t</span> pagetable, uint64 sz)</span><br>{<br>  ...<br><br>  uvmunmap(pagetable, USYSCALL, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>  uvmfree(pagetable, sz);<br>}<br></code></pre></td></tr></table></figure><blockquote><p>Q:Which other xv6 system call(s) could be made faster using this shared page? Explain how.</p></blockquote></li></ul><p>系统调用<code>sys_sbrk</code>也可以用此页来加速，因为该函数返回的是<code>myproc()-&gt;sz</code>,因此我们可以将<code>myproc()-&gt;sz</code>也在进程初始化的时候存在该页中，就像存进程的<code>pid</code>一样，用同样的原理可以加速此系统调用。</p><h2 id="Print-a-page-table"><a href="#Print-a-page-table" class="headerlink" title="Print a page table"></a>Print a page table</h2><h3 id="主要思路-1"><a href="#主要思路-1" class="headerlink" title="主要思路"></a>主要思路</h3><p>根据<code>Hints</code>来写，首先要输出所有页表项我们需要对三层页表进行遍历，页表是树状结构，遍历的历程参考<code>Hints</code>给出的<code>freewalk()</code>函数。</p><ul><li>在<code>kernel/defs.h</code>中定义<code>vmprint</code>函数：<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span>            <span class="hljs-title function_">vmprint</span><span class="hljs-params">(<span class="hljs-type">pagetable_t</span>)</span>;<br></code></pre></td></tr></table></figure></li><li>在<code>kernel/exec.c</code>中添加题目要求的代码：<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">...<br><span class="hljs-keyword">if</span>(p-&gt;pid==<span class="hljs-number">1</span>) vmprint(p-&gt;pagetable);<br><span class="hljs-keyword">return</span> argc; <span class="hljs-comment">// this ends up in a0, the first argument to main(argc, argv)</span><br>...<br></code></pre></td></tr></table></figure></li><li>接着在<code>kernel/vm.c</code>中实现<code>vmprint</code>函数(仿照<code>freewalk</code>函数)：<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> uint64 depth = <span class="hljs-number">0</span>; <span class="hljs-comment">// 来记录递归搜索深度</span><br><span class="hljs-type">void</span><br><span class="hljs-title function_">vmprint</span><span class="hljs-params">(<span class="hljs-type">pagetable_t</span> page)</span><br>{<br>  <span class="hljs-keyword">if</span>(depth == <span class="hljs-number">0</span>)           <span class="hljs-comment">// 根地址打印</span><br>  {<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"page table %p\n"</span>, page);<br>  }<br>  <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">512</span>; ++i)  <span class="hljs-comment">// 遍历页面上的页表项</span><br>  {<br>    <span class="hljs-type">pte_t</span> pte = page[i];   <br>    <span class="hljs-keyword">if</span>(pte &amp; PTE_V)        <span class="hljs-comment">// 页表项有效</span><br>    {<br>      <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt;= depth; ++j)<br>      { <br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">" .."</span>);<br>      }<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d: pte %p pa %p\n"</span>, i, (uint64)pte, (uint64)PTE2PA(pte));  <span class="hljs-comment">// 分别打印虚拟地址和物理地址</span><br><br>      <span class="hljs-keyword">if</span>(depth &lt; <span class="hljs-number">2</span>) <span class="hljs-comment">// 一级或二级页表递归搜索子页表项</span><br>      {<br>        depth ++;<br>        vmprint((<span class="hljs-type">pagetable_t</span>)PTE2PA(pte));<br>        depth --;<br>      }<br>    } <br>  }<br>}<br></code></pre></td></tr></table></figure></li></ul><blockquote><p>Q:Explain the output of vmprint in terms of Fig 3-4 from the text. What does page 0 contain? What is in page 2? When running in user mode, could the process read/write the memory mapped by page 1? What does the third to last page contain? </p></blockquote><p><code>Figure 3.4</code>如下：</p><p class='item-img' data-src='/2023/07/05/Lab3_Report/image/image.png'><img src="/2023/07/05/Lab3_Report/image/image.png" alt="Figure 3.4"></p><p>对于三层页表的存储内容，我们需要对<code>exec</code>函数进行分析，因为页表在这里被创建。<br>首先我们可以看到<code>exec</code>函数中与内存操作相关的第一处是如下代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// Load program into memory.</span><br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>, off=elf.phoff; i&lt;elf.phnum; i++, off+=<span class="hljs-keyword">sizeof</span>(ph)){<br>  <span class="hljs-keyword">if</span>(readi(ip, <span class="hljs-number">0</span>, (uint64)&amp;ph, off, <span class="hljs-keyword">sizeof</span>(ph)) != <span class="hljs-keyword">sizeof</span>(ph))<br>    <span class="hljs-keyword">goto</span> bad;<br>  <span class="hljs-keyword">if</span>(ph.type != ELF_PROG_LOAD)<br>    <span class="hljs-keyword">continue</span>;<br>  <span class="hljs-keyword">if</span>(ph.memsz &lt; ph.filesz)<br>    <span class="hljs-keyword">goto</span> bad;<br>  <span class="hljs-keyword">if</span>(ph.vaddr + ph.memsz &lt; ph.vaddr)<br>    <span class="hljs-keyword">goto</span> bad;<br>  <span class="hljs-keyword">if</span>(ph.vaddr % PGSIZE != <span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">goto</span> bad;<br>  uint64 sz1;<br>  <span class="hljs-keyword">if</span>((sz1 = uvmalloc(pagetable, sz, ph.vaddr + ph.memsz, flags2perm(ph.flags))) == <span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">goto</span> bad;<br>  sz = sz1;<br>  <span class="hljs-keyword">if</span>(loadseg(pagetable, ph.vaddr, ip, ph.off, ph.filesz) &lt; <span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">goto</span> bad;<br>}<br></code></pre></td></tr></table></figure><p>由此<code>page 0</code>所存储的应该是这些数据，如代码段，数据段等.</p><p>接着涉及内存操作的代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// Allocate two pages at the next page boundary.</span><br><span class="hljs-comment">// Make the first inaccessible as a stack guard.</span><br><span class="hljs-comment">// Use the second as the user stack.</span><br>sz = PGROUNDUP(sz);<br>uint64 sz1;<br><span class="hljs-keyword">if</span>((sz1 = uvmalloc(pagetable, sz, sz + <span class="hljs-number">2</span>*PGSIZE, PTE_W)) == <span class="hljs-number">0</span>)<br>  <span class="hljs-keyword">goto</span> bad;<br>sz = sz1;<br>uvmclear(pagetable, sz<span class="hljs-number">-2</span>*PGSIZE);<br>sp = sz;<br>stackbase = sp - PGSIZE;<br></code></pre></td></tr></table></figure><p>这段代码申请了两页的空间，其中第一页<code>page 1</code>作为<code>Figure 3.4</code>中<code>guard page</code>段,第二页作为<code>Figure 3.4</code>中<code>stack</code>段。</p><p>由函数<code>uvmclear</code>的定义，<code>page 1</code>的<code>PTE_U</code>位被置为0,因此用户程序无法访问<code>page 1</code>。</p><p>由<code>Figure 3.4</code>，第三页到最后一页包括了<code>heap</code>,<code>unused</code>,<code>trapframe</code>,<code>trampoline</code>.</p><h2 id="Detect-which-pages-have-been-accessed"><a href="#Detect-which-pages-have-been-accessed" class="headerlink" title="Detect which pages have been accessed"></a>Detect which pages have been accessed</h2><h3 id="主要思路-2"><a href="#主要思路-2" class="headerlink" title="主要思路"></a>主要思路</h3><p>本题要求我们对给定的有限个数的页面，程序可以检查这些页面是否被访问过，并且将结果编成<code>bitmask</code>输出到用户空间的指定地址。</p><p>首先需要确定怎么去查询一个页面是否被访问：参考<a href="https://github.com/riscv/riscv-isa-manual/releases/download/Priv-v1.12/riscv-privileged-20211203.pdf">RISC-V privileged instructions</a>中的<code>Figure 4.18</code>：</p><p class='item-img' data-src='/2023/07/05/Lab3_Report/image/image-1.png'><img src="/2023/07/05/Lab3_Report/image/image-1.png" alt="Figure 4.18"></p><p>以及<code>page 81</code>的如下描述：</p><blockquote><p>Each leaf PTE contains an accessed (A)and dirty (D) bit.The A bit indicates the virtual page has<br>been read,written,or fetched from since the last time the A bit was cleared.The D bit indicates<br>the virtual page has been written since the last time the D bit was cleared.</p></blockquote><p>我们知道可以用<code>PTE_A</code>作为页面是否被访问的标志，它的值是<code>PTE</code>的第六位(从零开始)，因此我们在<code>kernel/riscv.h</code>中添加如下代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> PTE_A (1L &lt;&lt; 6)</span><br></code></pre></td></tr></table></figure><p>若<code>PTE &amp; PTE_A == 1</code>,则说明此页面在检查前被访问过。</p><p>如何去得到一页中的<code>PTE</code>呢？根据<code>Hints</code>,我们可以用<code>walk</code>函数，它可以找到一个虚拟地址对应的<code>PTE</code>，返回其<code>physical address</code>。</p><p>再根据<code>Hints</code>的第8条，我们需要在检查完毕后将<code>PTE_A</code>位置零，因为检查本身相当于一次访问，若不置零则<code>PTE_A</code>位必然是1，下一次进行检查时就可能出现页面并未被访问但是PTE_A位为1的情况。这要求我们在检查完一个页面后就将<code>PTE</code>的第六位置零，参考<a href="https://www.chens.life/posts/how-to-set-a-specified-bit-of-a-binary-value-to-a-specified-value/">如何将一个二进制值的指定位设置为指定的值</a>,将二进制数<code>x</code>的第<code>n</code>位设置为<code>a</code>的公式为<code>x = ((x&amp;(1 &lt;&lt; n)) ^ x) ^ (a &lt;&lt; n)</code>。</p><p>在遍历的过程中如何设置<code>bitmask</code>呢？我采用如下代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span>(PTE_FLAGS(*pte) &amp; PTE_A)  <span class="hljs-comment">// 访问位为1，代表被访问过</span><br>{<br>  maskbits |= (<span class="hljs-number">1L</span> &lt;&lt; i);<br>}<br></code></pre></td></tr></table></figure><p>这样<code>maskbits</code>的第<code>i</code>位为1则表示第<code>i</code>页被访问过。</p><p>综合以上分析以及<code>Hints</code>中所给的其他的提示，最终补全<code>sys_pgaccess</code>代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span><br><span class="hljs-title function_">sys_pgaccess</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>{<br>  <span class="hljs-comment">// lab pgtbl: your code here.</span><br>  uint64 base;        <span class="hljs-comment">// 待检查页面起始地址</span><br>  <span class="hljs-type">int</span> pagenum;        <span class="hljs-comment">// 待检查页面数</span><br>  uint64 usraddr;     <span class="hljs-comment">// 等待输出结果的用户空间地址</span><br><br>  <span class="hljs-comment">// 获取参数</span><br>  argaddr(<span class="hljs-number">0</span>, &amp;base);<br>  argint(<span class="hljs-number">1</span>, &amp;pagenum);<br>  argaddr(<span class="hljs-number">2</span>, &amp;usraddr);<br><br>  <span class="hljs-comment">// bitmask</span><br>  uint64 maskbits = <span class="hljs-number">0</span>;<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">proc</span>* <span class="hljs-title">p</span> =</span> myproc();<br><br>  <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; pagenum; ++i)<br>  {<br>    <span class="hljs-type">pte_t</span>* pte = walk(p-&gt;pagetable, base + i * PGSIZE, <span class="hljs-number">0</span>);  <span class="hljs-comment">// 获取第i页的第0个页表项映射的物理地址</span><br>    <span class="hljs-keyword">if</span>(pte == <span class="hljs-number">0</span>)  panic(<span class="hljs-string">"page not exist!"</span>);<br>    <span class="hljs-keyword">if</span>(PTE_FLAGS(*pte) &amp; PTE_A)  <span class="hljs-comment">// 访问位为1，代表被访问过</span><br>    {<br>      maskbits |= (<span class="hljs-number">1L</span> &lt;&lt; i);<br>    }<br>    *pte = ((*pte &amp; PTE_A) ^ *pte) ^ <span class="hljs-number">0</span>;  <span class="hljs-comment">// 将PTE_A置零</span><br>  }<br>  <br>  <span class="hljs-keyword">if</span> (copyout(p-&gt;pagetable, usraddr, (<span class="hljs-type">char</span> *)&amp;maskbits, <span class="hljs-keyword">sizeof</span>(maskbits)) &lt; <span class="hljs-number">0</span>) <span class="hljs-comment">// 将bitmask的结果输出到用户空间</span><br>    panic(<span class="hljs-string">"sys_pgacess copyout error"</span>);<br>  <br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></table></figure><h2 id="Lab3参考链接"><a href="#Lab3参考链接" class="headerlink" title="Lab3参考链接"></a>Lab3参考链接</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/347172409">MIT 6.S081 2020 LAB3记录</a></li><li><a href="https://blog.csdn.net/ahundredmile/article/details/125531126">6.S081 Lab3 page tables</a></li><li><a href="https://www.chens.life/posts/mit-xv6-lab3/">xv6-labs-2022 Lab3 page tables 详解</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Lab3-page-tables&quot;&gt;&lt;a href=&quot;#Lab3-page-tables&quot; class=&quot;headerlink&quot; title=&quot;Lab3 page tables&quot;&gt;&lt;/a&gt;Lab3 page tables&lt;/h1&gt;&lt;h2 id=&quot;Speed-up-</summary>
      
    
    
    
    <category term="xv6-Lab" scheme="https://ma-b21.github.io/categories/xv6-Lab/"/>
    
    <category term="操作系统" scheme="https://ma-b21.github.io/categories/xv6-Lab/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="操作系统" scheme="https://ma-b21.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="MIT-xv6" scheme="https://ma-b21.github.io/tags/MIT-xv6/"/>
    
    <category term="c" scheme="https://ma-b21.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>xv6-Lab2</title>
    <link href="https://ma-b21.github.io/2023/07/05/Lab2_Report/"/>
    <id>https://ma-b21.github.io/2023/07/05/Lab2_Report/</id>
    <published>2023-07-05T12:21:33.423Z</published>
    <updated>2023-07-05T12:29:37.140Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Lab-2"><a href="#Lab-2" class="headerlink" title="Lab 2"></a>Lab 2</h1><h2 id="using-gdb"><a href="#using-gdb" class="headerlink" title="using gdb"></a>using gdb</h2><blockquote><p>Q1:Looking at the backtrace output,which function called syscall?</p></blockquote><p>执行backtrace后结果如下：</p><p class='item-img' data-src='/2023/07/05/Lab2_Report/image/image.png'><img src="/2023/07/05/Lab2_Report/image/image.png" alt="backtrace result"></p><p>由图可知是函数<code>usertrap()</code>调用了<code>syscall()</code>函数.</p><blockquote><p>Q2:What is the value of <code>p-&gt;trapframe-&gt;a7</code> and what does that value represent?(Hint:look <code>user/initcode.S</code>,the first user program xv6 starts.)</p></blockquote><p>首先输入两次n之后执行结果如下：</p><p class='item-img' data-src='/2023/07/05/Lab2_Report/image/image-1.png'><img src="/2023/07/05/Lab2_Report/image/image-1.png" alt="after type n"></p><p>语句<code>struct proc *p = myproc()</code>执行完毕，接着执行<code>p/x *p</code>看p的内容如下：</p><p class='item-img' data-src='/2023/07/05/Lab2_Report/image/image-2.png'><img src="/2023/07/05/Lab2_Report/image/image-2.png" alt="after *p"></p><p>此时查看<code>p-&gt;trapframe-&gt;a7</code>的值：</p><p class='item-img' data-src='/2023/07/05/Lab2_Report/image/image-3.png'><img src="/2023/07/05/Lab2_Report/image/image-3.png" alt="p->trapframe->a7"></p><p>得到<code>a7</code>的值为<code>7</code>。<br>根据<code>user/initcode.S</code>以及参考书第二章内容可知寄存器<code>a7</code>保存了系统将要执行的系统调用号，这里的系统调用号为<code>7</code>,由<code>kernel/syscall.h</code>的内容（下图）可知系统调用为<code>SYS_exec</code>。</p><p class='item-img' data-src='/2023/07/05/Lab2_Report/image/image-4.png'><img src="/2023/07/05/Lab2_Report/image/image-4.png" alt="SYScall"></p><blockquote><p>Q3:What was the previous mode that the CPU was in?</p></blockquote><p>在gdb中输入<code>p /x $sstatus</code>得到如下结果：</p><p class='item-img' data-src='/2023/07/05/Lab2_Report/image/image-5.png'><img src="/2023/07/05/Lab2_Report/image/image-5.png" alt="sstatus"></p><p>其值转换为二进制为：<code>0b100010</code>,在参考书<a href="https://github.com/riscv/riscv-isa-manual/releases/download/Priv-v1.12/riscv-privileged-20211203.pdf">RISC-V privileged instructions</a>中找到sstatus的值定义如下：</p><p class='item-img' data-src='/2023/07/05/Lab2_Report/image/image-6.png'><img src="/2023/07/05/Lab2_Report/image/image-6.png" alt="sstatus_bit"></p><p>同时对于其<code>SPP</code>位有描述如下：</p><blockquote><p>The SPP bit indicates the privilege level at which a hart was executing before entering supervisor mode. When a trap is taken, SPP is set to 0 if the trap originated from user mode, or 1 otherwise. When an SRET instruction (see Section 3.3.2) is executed to return from the trap handler, the privilege level is set to user mode if the SPP bit is 0, or supervisor mode if the SPP bit is 1; SPP is then set to 0.</p><p>SPP 位指示进入管理员模式之前 hart 执行的特权级别。 当采取陷阱时，如果陷阱源自用户模式，则 SPP 设置为 0，否则设置为 1。 当执行 SRET 指令（见第 3.3.2 节）从陷阱处理程序返回时，如果 SPP 位为 0，则特权级别设置为用户模式，如果 SPP 位为 1，则设置为超级用户模式； 然后将 SPP 设置为 0。</p></blockquote><p>因此，因为此时<code>SPP</code>位为<code>0</code>,所以在<code>syscall</code>之前系统处于用户模式(<code>User mode</code>)。</p><blockquote><p>Q4:Write down the assembly instruction the kernel is panicing at.Which register corresponds to the varialable num?</p></blockquote><p>首先按照指导将<code>kernel/syscall.c</code>中<code>syscall</code>函数中的<code>num = p-&gt;trapframe-&gt;a7</code>改为<code>num = * (int *) 0</code>,接着执行<code>make qemu</code>得到如下输出：</p><p class='item-img' data-src='/2023/07/05/Lab2_Report/image/image-9.png'><img src="/2023/07/05/Lab2_Report/image/image-9.png" alt="panic"></p><p>在<code>kernel/kernel.asm</code>中查找上图中的<code>sepc</code>值，得到结果如下图：</p><p class='item-img' data-src='/2023/07/05/Lab2_Report/image/image-10.png'><img src="/2023/07/05/Lab2_Report/image/image-10.png" alt="assemblely"></p><p>对应的汇编指令为<code>lw a3,0(zero)</code>,由参考书<a href="https://web.eecs.utk.edu/~smarz1/courses/ece356/notes/assembly/">RISC-V Assembly Language</a>,</p><p class='item-img' data-src='/2023/07/05/Lab2_Report/image/image-11.png'><img src="/2023/07/05/Lab2_Report/image/image-11.png" alt="lw"></p><p>这条汇编代码代表：将内存中地址从<code>0</code>开始的一个字<code>word(2bytes)</code>大小的数据加载到寄存器<code>a3</code>中。</p><blockquote><p>Q5:Why does the kernel crash?Hint:look at figure 3-3 in the text;is address 0 mapped in the kernel address space?Is that confirmed by the value in scause above?(See<br>description of scause in RISC-V privileged instructions)</p></blockquote><p>首先按照实验要求在上文<code>panic</code>的代码处打上断点并继续执行，结果如下：</p><p class='item-img' data-src='/2023/07/05/Lab2_Report/image/image-12.png'><img src="/2023/07/05/Lab2_Report/image/image-12.png" alt="breakpoint"></p><p>此时再次输入<code>n</code>并执行会引起内核<code>panic</code>,如下：</p><p class='item-img' data-src='/2023/07/05/Lab2_Report/image/image-13.png'><img src="/2023/07/05/Lab2_Report/image/image-13.png" alt="n"><br class='item-img' data-src='/2023/07/05/Lab2_Report/image/image-14.png'><img src="/2023/07/05/Lab2_Report/image/image-14.png" alt="panic"></p><p>使用<code>Ctrl+C</code>来退出当前线程并打印<code>scause</code>的值如下：</p><p class='item-img' data-src='/2023/07/05/Lab2_Report/image/image-15.png'><img src="/2023/07/05/Lab2_Report/image/image-15.png" alt="scause"></p><p>接着开始分析：首先根据参考书<a href="https://pdos.csail.mit.edu/6.828/2022/xv6/book-riscv-rev3.pdf">book-riscv-rev3</a>中的<code>Figure 3.3</code>(如下图)，</p><p class='item-img' data-src='/2023/07/05/Lab2_Report/image/image-16.png'><img src="/2023/07/05/Lab2_Report/image/image-16.png" alt="F"></p><p>内核地址空间基地址为<code>0x80000000</code>,因此代码中的数据地址<code>0</code>不映射到内核地址空间中，因此内核会崩溃。</p><p>而<code>scause</code>的值为13，在参考书<a href="https://web.eecs.utk.edu/~smarz1/courses/ece356/notes/assembly/">RISC-V Assembly Language</a>的<code>Table 8.6</code>(如下图)中可以查到代码<code>13</code>对应<code>Load page fault</code>，验证了结论。</p><p class='item-img' data-src='/2023/07/05/Lab2_Report/image/image-17.png'><img src="/2023/07/05/Lab2_Report/image/image-17.png" alt="Table 8.6"></p><blockquote><p>Q6:What is the name of the binary that was running when the kernel paniced? What is its process id (pid)? </p></blockquote><p>首先重启<code>qemu</code>和<code>gdb</code>执行如下命令:</p><p class='item-img' data-src='/2023/07/05/Lab2_Report/image/image-18.png'><img src="/2023/07/05/Lab2_Report/image/image-18.png" alt="name"></p><p>为了获得进程<code>pid</code>,执行如下命令：</p><p class='item-img' data-src='/2023/07/05/Lab2_Report/image/image-20.png'><img src="/2023/07/05/Lab2_Report/image/image-20.png" alt="pid"></p><p>因此</p><p><code>name = initcode\000\000\000\000\000\000\000</code>;</p><p><code>pid = 1</code>.</p><h2 id="System-call-tracing"><a href="#System-call-tracing" class="headerlink" title="System call tracing"></a>System call tracing</h2><h3 id="主要思路"><a href="#主要思路" class="headerlink" title="主要思路"></a>主要思路</h3><ul><li>根据题中所给的Hints来修改程序<ul><li><code>Makefile</code>:Add <code>$U/_trace</code> to <code>UPROGS</code>.</li><li><code>user/user.h</code>: 增加<code>trace</code>函数的声明，如下：<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">trace</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span>;<br></code></pre></td></tr></table></figure></li><li><code>user/usys.pl</code>:增加如下代码：<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">entry(<span class="hljs-string">"trace"</span>);<br></code></pre></td></tr></table></figure></li><li><code>kernel/proc.h</code>:在<code>struct proc</code>中添加成员变量<code>mask</code>,用于存储<code>trace</code>函数的参数<code>1 &lt;&lt; SYS_call</code>:<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">proc</span>{</span><br>  uint64 mask;<br>  ...<br>};<br></code></pre></td></tr></table></figure></li><li><code>kernel/sysproc.c</code>:增加函数<code>sys_trace</code>如下：<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c">uint64<br><span class="hljs-title function_">sys_trace</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>{<br>  <span class="hljs-type">int</span> mask;<br>  argint(<span class="hljs-number">0</span>, &amp;mask); <span class="hljs-comment">// 从系统调用中获得参数mask</span><br><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">proc</span>* <span class="hljs-title">p</span> =</span> myproc();<br>  p-&gt;mask = mask; <span class="hljs-comment">// 将当前进程的mask值设为获取的参数</span><br><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></table></figure>用于在调用<code>trace</code>时来接收参数<code>mask</code>.</li><li><code>kernel/proc.c</code>:在<code>fork</code>函数中增加如下代码：<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c">fork(<span class="hljs-type">void</span>){<br>  ...<br>  np-&gt;sz = p-&gt;sz;<br><br>  <span class="hljs-comment">// 复制trace mask值到子进程</span><br>  np-&gt;mask = p-&gt;mask;<br><br>  <span class="hljs-comment">// copy saved user registers.</span><br>  *(np-&gt;trapframe) = *(p-&gt;trapframe);<br>  ...<br>}<br></code></pre></td></tr></table></figure>上述代码实现将掩码<code>mask</code>从父进程传到子进程.</li><li><code>kernel/syscall.h</code>:增加系统调用号<code>SYS_trace</code>:<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> SYS_trace 22</span><br></code></pre></td></tr></table></figure></li><li><code>kernel/syscall.c</code>:<ul><li>增加函数声明：<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">extern</span> uint64 <span class="hljs-title function_">sys_trace</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br></code></pre></td></tr></table></figure></li><li>增加<code>syscalls</code>的取值：<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-title function_">uint64</span> <span class="hljs-params">(*syscalls[])</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> = {<br>...<br>[SYS_close]   sys_close,<br>[SYS_trace]   sys_trace,<br>};<br></code></pre></td></tr></table></figure></li><li>增加系统调用名的字符串数组：<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 用来在打印trace函数运行结果时输出系统调用名称</span><br><span class="hljs-type">static</span> <span class="hljs-type">char</span>* syscall_names[] = {<br>  <span class="hljs-string">""</span>,<br>  <span class="hljs-string">"syscall fork"</span>,<br>  <span class="hljs-string">"syscall exit"</span>,<br>  <span class="hljs-string">"syscall wait"</span>,<br>  <span class="hljs-string">"syscall pipe"</span>,<br>  <span class="hljs-string">"syscall read"</span>,<br>  <span class="hljs-string">"syscall kill"</span>,<br>  <span class="hljs-string">"syscall exec"</span>,<br>  <span class="hljs-string">"syscall fstat"</span>,<br>  <span class="hljs-string">"syscall chdir"</span>,<br>  <span class="hljs-string">"syscall dup"</span>,<br>  <span class="hljs-string">"syscall getpid"</span>,<br>  <span class="hljs-string">"syscall sbrk"</span>,<br>  <span class="hljs-string">"syscall sleep"</span>,<br>  <span class="hljs-string">"syscall uptime"</span>,<br>  <span class="hljs-string">"syscall open"</span>,<br>  <span class="hljs-string">"syscall write"</span>,<br>  <span class="hljs-string">"syscall mknod"</span>,<br>  <span class="hljs-string">"syscall unlink"</span>,<br>  <span class="hljs-string">"syscall link"</span>,<br>  <span class="hljs-string">"syscall mkdir"</span>,<br>  <span class="hljs-string">"syscall close"</span>,<br>  <span class="hljs-string">"syscall trace"</span>,<br>};<br></code></pre></td></tr></table></figure></li><li>修改<code>syscall</code>函数：<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span><br><span class="hljs-title function_">syscall</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>{<br>  ...<br>  <span class="hljs-keyword">if</span>(num &gt; <span class="hljs-number">0</span> &amp;&amp; num &lt; NELEM(syscalls) &amp;&amp; syscalls[num]) {<br>    <span class="hljs-comment">// Use num to lookup the system call function for num, call it,</span><br>    <span class="hljs-comment">// and store its return value in p-&gt;trapframe-&gt;a0</span><br>    p-&gt;trapframe-&gt;a0 = syscalls[num]();<br><br>    <span class="hljs-keyword">if</span>((p-&gt;mask &gt;&gt; num) &amp; <span class="hljs-number">0b1</span>){ <span class="hljs-comment">// 如果mask的值译码后等于该系统调用的系统调用号，则打印相关信息</span><br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d: %s -&gt; %d\n"</span>, p-&gt;pid, syscall_names[num], p-&gt;trapframe-&gt;a0);<br>    }<br>  } <span class="hljs-keyword">else</span> {<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d %s: unknown sys call %d\n"</span>,<br>      p-&gt;pid, p-&gt;name, num);<br>    p-&gt;trapframe-&gt;a0 = <span class="hljs-number">-1</span>;<br>  }<br>}<br></code></pre></td></tr></table></figure>上述改动中内层条件判断的语句就是将<code>mask</code>进行解码，然后与1作比较，若相等则输出该系统调用.</li></ul></li></ul></li></ul><p>经过以上对内核的修改，成功实现了系统调用<code>trace</code>.</p><h2 id="sysinfo"><a href="#sysinfo" class="headerlink" title="sysinfo"></a>sysinfo</h2><h3 id="主要思路-1"><a href="#主要思路-1" class="headerlink" title="主要思路"></a>主要思路</h3><ul><li>和上个实验一样按照<code>Hints</code>来逐步完成，本实验的主要目的是完成系统调用<code>sysinfo</code>来统计系统非空闲进程数量和空闲空间字节数.<ul><li>首先是将系统调用添加到内核中,参考<code>System call tracing</code>,进行如下操作：<ul><li>Add <code>$U/_sysinfotest</code> to <code>UPROGS</code> in <code>Makefile</code></li><li>在<code>user/user.h</code>中进行系统调用函数的声明：<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sysinfo</span>;</span><br>...<br><span class="hljs-type">int</span> <span class="hljs-title function_">sysinfo</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> sysinfo *)</span>;<br>...<br></code></pre></td></tr></table></figure></li><li>在<code>user/usys.pl</code>中添加如下代码：<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">...<br>entry(<span class="hljs-string">"trace"</span>);<br>entry(<span class="hljs-string">"sysinfo"</span>);<br></code></pre></td></tr></table></figure></li><li>在<code>kernel/syscall.h</code>中添加系统调用号：<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> SYS_sysinfo 23</span><br></code></pre></td></tr></table></figure></li><li>在<code>kernel/syscall.c</code>中添加如下改动：<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c">...<br><span class="hljs-keyword">extern</span> uint64 <span class="hljs-title function_">sys_info</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><br><span class="hljs-comment">// An array mapping syscall numbers from syscall.h</span><br><span class="hljs-comment">// to the function that handles the system call.</span><br><span class="hljs-type">static</span> <span class="hljs-title function_">uint64</span> <span class="hljs-params">(*syscalls[])</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> = {<br>...<br>[SYS_sysinfo]    sys_info,<br>};<br><br><span class="hljs-comment">// 用来在打印trace函数运行结果时输出系统调用名称</span><br><span class="hljs-type">static</span> <span class="hljs-type">char</span>* syscall_names[] = {<br>  ...<br>  <span class="hljs-string">"syscall sysinfo"</span><br>};<br>...<br></code></pre></td></tr></table></figure></li></ul></li><li>接着就是实现该系统调用，该系统调用的功能是统计空闲内存和非空闲进程<ul><li>统计空闲内存：在<code>kernel/kalloc.c</code>中添加如下函数<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 用于统计空闲空间的大小，free_num计算得到的是页数，每页的大小为 4096 bytes</span><br>uint64<br><span class="hljs-title function_">free_mem_num</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>{<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">run</span> *<span class="hljs-title">page</span>;</span><br>  uint64 free_num = <span class="hljs-number">0</span>;<br>  acquire(&amp;kmem.lock);  <span class="hljs-comment">// 访问上锁</span><br>  page = kmem.freelist; <span class="hljs-comment">// 空闲页面的链表头</span><br>  <span class="hljs-keyword">while</span> (page) {<br>    free_num++;<br>    page = page-&gt;next;<br>  }<br>  release(&amp;kmem.lock);  <span class="hljs-comment">// 访问结束解锁        </span><br>  <span class="hljs-keyword">return</span> free_num * <span class="hljs-number">4096</span>;<br>}<br></code></pre></td></tr></table></figure></li><li>统计非空闲进程：在<code>kernel/proc.c</code>中添加如下函数<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 用于统计当前非空闲进程数量</span><br>uint64<br><span class="hljs-title function_">proc_used_num</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>{<br>  uint64 nproc = <span class="hljs-number">0</span>;  <span class="hljs-comment">// 计数</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">struct</span> proc *p = proc; p &lt; &amp;proc[NPROC]; p++) {<br>    <span class="hljs-keyword">if</span> (p-&gt;state != UNUSED)<br>      nproc++;<br>  }<br>  <span class="hljs-keyword">return</span> nproc;<br>}<br></code></pre></td></tr></table></figure></li><li>在实现上述函数后要将二者的声明加入到<code>kernel/defs.h</code>中.</li><li>在<code>kernel/sysproc.c</code>中实现系统调用<code>uint64 sys_info(void)</code>:<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c">uint64<br><span class="hljs-title function_">sys_info</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>{<br>  <span class="hljs-comment">// 用户空间指向sysinfo的指针</span><br>  uint64 u_addr;<br>  argaddr(<span class="hljs-number">0</span>, &amp;u_addr);<br><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sysinfo</span> <span class="hljs-title">info</span>;</span><br>  info.freemem = free_mem_num(); <span class="hljs-comment">// 获取空闲内存</span><br>  info.nproc = proc_used_num();  <span class="hljs-comment">// 获取非空闲进程</span><br><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">proc</span> *<span class="hljs-title">p</span> =</span> myproc();<br>  <span class="hljs-comment">// 根据Hints参考kernel/file.c/filestate()使用copy函数将info复制到用户空间</span><br>  <span class="hljs-keyword">if</span>(copyout(p-&gt;pagetable, u_addr, (<span class="hljs-type">char</span>*)(&amp;info), <span class="hljs-keyword">sizeof</span>(info)) &lt; <span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://www.chens.life/posts/mit-xv6-lab2/">xv6-labs-2022 Lab2 system call 详解</a></li><li><a href="https://zhuanlan.zhihu.com/p/407169754#Sysinfo">MIT6.s081-2020 操作系统入门 Lab2 System Calls</a></li><li class='item-img' data-src='/2023/07/05/Lab2_Report/image/image-21.png'><img src="/2023/07/05/Lab2_Report/image/image-21.png" alt="Alt text"></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Lab-2&quot;&gt;&lt;a href=&quot;#Lab-2&quot; class=&quot;headerlink&quot; title=&quot;Lab 2&quot;&gt;&lt;/a&gt;Lab 2&lt;/h1&gt;&lt;h2 id=&quot;using-gdb&quot;&gt;&lt;a href=&quot;#using-gdb&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    <category term="xv6-Lab" scheme="https://ma-b21.github.io/categories/xv6-Lab/"/>
    
    <category term="操作系统" scheme="https://ma-b21.github.io/categories/xv6-Lab/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="操作系统" scheme="https://ma-b21.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="MIT-xv6" scheme="https://ma-b21.github.io/tags/MIT-xv6/"/>
    
    <category term="c" scheme="https://ma-b21.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>xv6-Lab1</title>
    <link href="https://ma-b21.github.io/2023/07/05/Lab1_Report/"/>
    <id>https://ma-b21.github.io/2023/07/05/Lab1_Report/</id>
    <published>2023-07-05T12:21:14.451Z</published>
    <updated>2023-07-05T12:29:17.340Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Lab-1"><a href="#Lab-1" class="headerlink" title="Lab 1"></a>Lab 1</h1><h2 id="sleep"><a href="#sleep" class="headerlink" title="sleep"></a>sleep</h2><h3 id="主要思路"><a href="#主要思路" class="headerlink" title="主要思路"></a>主要思路</h3><ul><li><p>检查参数个数</p><ul><li>通过对argc进行判断，sleep操作argc的值应为2.</li></ul></li><li><p>系统调用sleep()</p><ul><li>函数原型为sleep(int),因此要先将argv[1]参数转换为int类型再进行系统调用sleep().</li></ul></li><li><p>代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">"kernel/types.h"</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">"kernel/stat.h"</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">"user/user.h"</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span><br>{<br>    <span class="hljs-keyword">if</span>(argc &lt; <span class="hljs-number">2</span> || argc &gt; <span class="hljs-number">2</span>){<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-number">2</span>, <span class="hljs-string">"Usage like \"sleep clockTime\"\n"</span>); <span class="hljs-comment">// 实验要求参数为一个整数</span><br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>); <span class="hljs-comment">// 异常退出</span><br>    }<br><br>    <span class="hljs-type">int</span> times = atoi(argv[<span class="hljs-number">1</span>]); <span class="hljs-comment">// 调用系统调用sleep参数为int类型</span><br>    sleep(times);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>}<br></code></pre></td></tr></table></figure></li></ul><h2 id="pingpong"><a href="#pingpong" class="headerlink" title="pingpong"></a>pingpong</h2><h3 id="主要思路-1"><a href="#主要思路-1" class="headerlink" title="主要思路"></a>主要思路</h3><ul><li><p>建立管道</p><ul><li>因为管道通信为单向，因此需要两条管道.</li></ul></li><li><p>建立子进程</p><ul><li>注意用fork函数建立子进程后在子进程中其返回值为0，父进程中其返回值为子进程PID，若建立失败返回值为负.</li></ul></li><li><p>读写操作</p><ul><li>注意write函数为非阻塞式，而read函数为阻塞式</li></ul></li><li><p>题目相关</p><ul><li>本题中评分时输出格式要求与样例输出一致，而非题目描述，即”pid:”后面有一空格.</li></ul></li><li><p>代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">"kernel/types.h"</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">"kernel/stat.h"</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">"user/user.h"</span></span><br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span><br>{<br>    <span class="hljs-type">int</span> fToc[<span class="hljs-number">2</span>], cTof[<span class="hljs-number">2</span>]; <span class="hljs-comment">// 分别建立父进程到子进程,子进程到父进程的管道.</span><br>    pipe(fToc);<br>    pipe(cTof);<br>    <span class="hljs-type">int</span> pid = fork(); <span class="hljs-comment">// 建立子进程</span><br>    <span class="hljs-keyword">if</span>(pid &lt; <span class="hljs-number">0</span>)<br>    {<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-number">2</span>, <span class="hljs-string">"error in fork !"</span>); <span class="hljs-comment">// 若进程建立失败会返回负值</span><br>    }<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(pid &gt; <span class="hljs-number">0</span>) <span class="hljs-comment">// 父进程中fork返回值为正</span><br>    {<br>        close(fToc[<span class="hljs-number">0</span>]); <span class="hljs-comment">// 关闭子进程读端</span><br>        close(cTof[<span class="hljs-number">1</span>]); <span class="hljs-comment">// 关闭子进程写端</span><br>        write(fToc[<span class="hljs-number">1</span>], <span class="hljs-string">"ping"</span>, <span class="hljs-number">4</span>); <span class="hljs-comment">// 向子进程发送1位数据</span><br>        close(fToc[<span class="hljs-number">1</span>]); <span class="hljs-comment">// 关闭父进程写端</span><br>        <span class="hljs-type">char</span>* readBuf = (<span class="hljs-type">char</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">char</span>) * <span class="hljs-number">4</span>); <span class="hljs-comment">// 申请读入数据流空间</span><br>        <span class="hljs-type">int</span> fatherPID = getpid(); <span class="hljs-comment">// 获取父进程PID</span><br>        read(cTof[<span class="hljs-number">0</span>], readBuf, <span class="hljs-number">4</span>); <span class="hljs-comment">// 从子进程中接收数据（阻塞式）</span><br>        close(cTof[<span class="hljs-number">0</span>]); <span class="hljs-comment">//关闭父进程读端</span><br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-number">2</span>, <span class="hljs-string">"%d: received %s\n"</span>, fatherPID, readBuf); <span class="hljs-comment">// 按实验要求格式输出</span><br>        <span class="hljs-built_in">free</span>(readBuf); <span class="hljs-comment">// 释放读入数据流空间</span><br>    }<br>    <span class="hljs-keyword">else</span> <span class="hljs-comment">// 子进程中fork返回值为0</span><br>    {<br>        close(fToc[<span class="hljs-number">1</span>]); <span class="hljs-comment">// 关闭父进程写端</span><br>        close(cTof[<span class="hljs-number">0</span>]); <span class="hljs-comment">// 关闭父进程读端</span><br>        <span class="hljs-type">char</span>* readBuf = (<span class="hljs-type">char</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">char</span>) * <span class="hljs-number">4</span>); <span class="hljs-comment">// 申请读入数据流空间</span><br>        <span class="hljs-type">int</span> childPID = getpid(); <span class="hljs-comment">// 获取子进程PID</span><br>        read(fToc[<span class="hljs-number">0</span>], readBuf, <span class="hljs-number">4</span>); <span class="hljs-comment">// 从父进程中接收数据（阻塞式）</span><br>        close(fToc[<span class="hljs-number">0</span>]); <span class="hljs-comment">// 关闭子进程读端</span><br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-number">2</span>, <span class="hljs-string">"%d: received %s\n"</span>, childPID, readBuf); <span class="hljs-comment">// 按实验要求格式输出</span><br>        write(cTof[<span class="hljs-number">1</span>], <span class="hljs-string">"pong"</span>, <span class="hljs-number">4</span>); <span class="hljs-comment">// 向父进程发送1位数据</span><br>        close(cTof[<span class="hljs-number">1</span>]); <span class="hljs-comment">// 关闭子进程写端</span><br>        <span class="hljs-built_in">free</span>(readBuf); <span class="hljs-comment">// 释放读入数据流空间</span><br>    }<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>}<br></code></pre></td></tr></table></figure></li></ul><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://www.cnblogs.com/robbychan/p/3786886.html#:~:text=%E5%87%BD%E6%95%B0%20pipe%E6%88%91%E4%BB%AC%E7%94%A8%E4%B8%AD%E6%96%87%E5%8F%AB%E5%81%9A%E7%AE%A1%E9%81%93%E3%80%82%20%E4%BB%A5%E4%B8%8B%E8%AE%B2%E8%A7%A3%E5%9D%87%E6%98%AF%E5%9F%BA%E4%BA%8ELinux%E4%B8%BA%E7%8E%AF%E5%A2%83%EF%BC%9A%E7%AE%80%E4%BB%8B%20%E6%89%80%E9%9C%80%E5%A4%B4%E6%96%87%E4%BB%B6%20%23include%20%E5%87%BD%E6%95%B0%E5%8E%9F%E5%9E%8B%20int%20pipe%28int,%E5%87%BD%E6%95%B0%E4%BC%A0%E5%85%A5%E5%80%BC%20fd%3A%E7%AE%A1%E9%81%93%E7%9A%84%E4%B8%A4%E4%B8%AA%E6%96%87%E4%BB%B6%E6%8F%8F%E8%BF%B0%E7%AC%A6%EF%BC%8C%E4%B9%8B%E5%90%8E%E5%B0%B1%E6%98%AF%E5%8F%AF%E4%BB%A5%E7%9B%B4%E6%8E%A5%E6%93%8D%E4%BD%9C%E8%BF%99%E4%B8%A4%E4%B8%AA%E6%96%87%E4%BB%B6%E6%8F%8F%E8%BF%B0%E7%AC%A6%20%E8%BF%94%E5%9B%9E%E5%80%BC%20%E6%88%90%E5%8A%9F%200%20%E5%A4%B1%E8%B4%A5%20-1%E4%BB%80%E4%B9%88%E6%98%AF%E7%AE%A1%E9%81%93%20%E7%AE%A1%E9%81%93">进程间通信，管道pipe函数详解</a></li><li><a href="https://blog.csdn.net/kxjrzyk/article/details/81603049">Linux中fork函数详解</a></li></ul><h2 id="primes"><a href="#primes" class="headerlink" title="primes"></a>primes</h2><h3 id="主要实现思路"><a href="#主要实现思路" class="headerlink" title="主要实现思路"></a>主要实现思路</h3><ul><li><p>主函数</p><ul><li>主函数先建立一个与子进程通信的管道，将2-35的数据都写入管道中，接着建立子进程，子进程递归调用函数，该递归函数负责筛出质数.</li></ul></li><li><p>递归函数</p><ul><li>声明：<code>void primes(int fToc[2])</code>,其中<code>fToc[2]</code>是与父进程间的通信管道。</li><li>功能：负责读取父进程筛选后剩下的数字，函数体内首先读取一个整数，若读取成功则该数为本次递归基质数，若失败则说明筛选结束。 读取成功后继续对管道进行读取，筛选出不是基质数倍数的数字，创建新管道进行写入，然后建立子进程继续递归执行此函数，此时父进程等待子进程结束。</li></ul></li><li><p>代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">"kernel/types.h"</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">"kernel/stat.h"</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">"user/user.h"</span></span><br><br><span class="hljs-comment">// 用来递归的创建子进程及管道</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">primes</span><span class="hljs-params">(<span class="hljs-type">int</span> fToc[<span class="hljs-number">2</span>])</span><br>{<br>    <span class="hljs-type">int</span> count = <span class="hljs-number">0</span>;           <span class="hljs-comment">// 未被筛的数字的个数</span><br>    close(fToc[<span class="hljs-number">1</span>]);          <span class="hljs-comment">// 与父进程管道的写端</span><br>    <span class="hljs-type">int</span> numbers[<span class="hljs-number">34</span>] = { <span class="hljs-number">0</span> }; <span class="hljs-comment">// 储存未被筛的数字</span><br>    <span class="hljs-type">int</span> base;                <span class="hljs-comment">// 本次递归筛选的基质数</span><br>    <span class="hljs-type">int</span> readSuccess = <span class="hljs-number">0</span>;     <span class="hljs-comment">// 数据读取成功标志</span><br>    readSuccess = read(fToc[<span class="hljs-number">0</span>], &amp;base, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>)); <span class="hljs-comment">// 读取基质数</span><br>    <br>    <span class="hljs-keyword">if</span>(readSuccess == <span class="hljs-number">0</span>)  <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>); <span class="hljs-comment">// 没有基质数，即管道内为空，子进程退出</span><br>    <br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-number">2</span>, <span class="hljs-string">"prime %d\n"</span>, base); <span class="hljs-comment">// 按照题述格式输出本次递归基质数</span><br><br>    <span class="hljs-comment">// 继续读取数据</span><br>    readSuccess = read(fToc[<span class="hljs-number">0</span>], &amp;numbers[count], <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br>    <span class="hljs-keyword">while</span>(readSuccess &gt; <span class="hljs-number">0</span>)<br>    {<br>        <span class="hljs-keyword">if</span>(numbers[count] % base != <span class="hljs-number">0</span>) count++;<br>        readSuccess = read(fToc[<span class="hljs-number">0</span>], &amp;numbers[count], <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br>    }<br>    close(fToc[<span class="hljs-number">0</span>]); <span class="hljs-comment">// 关闭读端</span><br>    <br>    <span class="hljs-type">int</span> nfToc[<span class="hljs-number">2</span>]; <span class="hljs-comment">// 创建与子进程通信的新管道</span><br>    pipe(nfToc);<br><br>    <span class="hljs-keyword">if</span>(fork() == <span class="hljs-number">0</span>) <span class="hljs-comment">// 子进程继续递归筛质数</span><br>    {<br>        primes(nfToc);<br>    }<br>    <span class="hljs-keyword">else</span> <span class="hljs-comment">// 父进程关闭管道读端，并写入本次递归未筛选的数字，之后等待子进程退出</span><br>    {<br>        close(nfToc[<span class="hljs-number">0</span>]);<br>        write(nfToc[<span class="hljs-number">1</span>], &amp;numbers, count * <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br>        close(nfToc[<span class="hljs-number">1</span>]);<br>        wait(<span class="hljs-number">0</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>    }<br>}<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span><br>{<br>    <span class="hljs-type">int</span> number[<span class="hljs-number">34</span>];  <span class="hljs-comment">// 存2-35的数字</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">34</span>; ++i)<br>    {<br>        number[i] = i + <span class="hljs-number">2</span>;<br>    }<br>  <br>  <br>    <span class="hljs-type">int</span> fToc[<span class="hljs-number">2</span>]; <span class="hljs-comment">// 建立与子进程间通信管道</span><br>    pipe(fToc);<br><br>    <span class="hljs-keyword">if</span>(fork() == <span class="hljs-number">0</span>) <span class="hljs-comment">// 子进程递归筛质数</span><br>    {<br>        primes(fToc);<br>    }<br>    <span class="hljs-keyword">else</span> <span class="hljs-comment">// 父进程关闭管道读端，并写入本次递归未筛选的数字，之后等待子进程退出 </span><br>    {<br>        close(fToc[<span class="hljs-number">0</span>]);<br>        write(fToc[<span class="hljs-number">1</span>], &amp;number, <span class="hljs-number">34</span> * <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br>        close(fToc[<span class="hljs-number">1</span>]);<br>        wait(<span class="hljs-number">0</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>    }<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>}<br></code></pre></td></tr></table></figure></li></ul><h3 id="参考链接-1"><a href="#参考链接-1" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://blog.csdn.net/yangbodong22011/article/details/49741027">父进程等待子进程结束 waitpid wait</a></li></ul><h2 id="find"><a href="#find" class="headerlink" title="find"></a>find</h2><h3 id="主要思路-2"><a href="#主要思路-2" class="headerlink" title="主要思路"></a>主要思路</h3><ul><li>检查参数<ul><li>参数个数不为3个时输出错误</li></ul></li><li><code>find</code><ul><li>当前<code>path</code>为文件时直接对比文件名与目标文件名</li><li>当前<code>path</code>为目录时遍历其子文件，递归进行搜索</li></ul></li></ul><h3 id="实现难点"><a href="#实现难点" class="headerlink" title="实现难点"></a>实现难点</h3><ul><li><p>获取文件信息</p><ul><li><code>fstat(int, struct stat*)</code>,<code>int</code>为文件句柄，<code>struct stat</code>为存文件信息的结构</li></ul></li><li><p>遍历子目录</p><ul><li>利用<code>path + "/" + 子文件名</code>得到新<code>path</code>进行递归</li><li>子文件名通过<code>read(fd, &amp;de, sizeof(de))</code>得到<code>de.name</code>,其中<code>fd</code>为文件句柄，<code>de</code>为建立的目录结构</li><li>注意在遍历时要跳过<code>.,..</code>以及无效目录</li></ul></li><li><p>代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">"kernel/types.h"</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">"kernel/stat.h"</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">"user/user.h"</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">"kernel/fs.h"</span></span><br><br><span class="hljs-comment">// 通过路径获取文件名</span><br><span class="hljs-type">char</span>* <span class="hljs-title function_">fmtname</span><span class="hljs-params">(<span class="hljs-type">char</span> *path)</span><br>{<br>    <span class="hljs-type">char</span> *p; <br>    <span class="hljs-keyword">for</span>(p=path+<span class="hljs-built_in">strlen</span>(path); p &gt;= path &amp;&amp; *p != <span class="hljs-string">'/'</span>; p--)<br>        ;<br>    p++;<br><br>    <span class="hljs-keyword">return</span> p;<br>}<br><br><span class="hljs-comment">// 在path及其子目录下查找名为fileName的文件</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">find</span><span class="hljs-params">(<span class="hljs-type">char</span>* path, <span class="hljs-type">char</span>*fileName)</span><br>{<br>    <span class="hljs-type">char</span> buf[<span class="hljs-number">512</span>], *p; <span class="hljs-comment">// 缓冲区及其指针</span><br>    <span class="hljs-type">int</span> fd; <span class="hljs-comment">// 文件句柄</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dirent</span> <span class="hljs-title">de</span>;</span> <span class="hljs-comment">// 目录结构</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stat</span> <span class="hljs-title">st</span>;</span> <span class="hljs-comment">// 文件信息结构</span><br><br>    <span class="hljs-keyword">if</span>((fd = open(path, <span class="hljs-number">0</span>)) &lt; <span class="hljs-number">0</span>) <span class="hljs-comment">// 打开path目录文件</span><br>    {<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-number">2</span>, <span class="hljs-string">"ls: cannot open %s\n"</span>, path);<br>        <span class="hljs-keyword">return</span>;<br>    }<br><br>    <span class="hljs-keyword">if</span>(fstat(fd, &amp;st) &lt; <span class="hljs-number">0</span>) <span class="hljs-comment">// 获取文件信息</span><br>    {<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-number">2</span>, <span class="hljs-string">"ls: cannot stat %s\n"</span>, path);<br>        close(fd);<br>        <span class="hljs-keyword">return</span>;<br>    }<br><br>    <span class="hljs-keyword">switch</span>(st.type){<br>    <span class="hljs-keyword">case</span> T_FILE: <span class="hljs-comment">// 如果是文件则将文件名与目标文件名比较</span><br>        <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">strcmp</span>(fmtname(path), fileName)) <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%s\n"</span>, path);<br>        <span class="hljs-keyword">break</span>;<br><br>    <span class="hljs-keyword">case</span> T_DIR: <span class="hljs-comment">// 如果是目录文件则递归查找目录内的所有文件</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strlen</span>(path) + <span class="hljs-number">1</span> + DIRSIZ + <span class="hljs-number">1</span> &gt; <span class="hljs-keyword">sizeof</span> buf) <span class="hljs-comment">// 目录长度超过最大限制</span><br>        {<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">"ls: path too long\n"</span>);<br>            <span class="hljs-keyword">break</span>;<br>        }   <br>        <span class="hljs-built_in">strcpy</span>(buf, path); <span class="hljs-comment">// 将路径拷贝到缓冲区</span><br>        p = buf+<span class="hljs-built_in">strlen</span>(buf); <span class="hljs-comment">// 将指针指向缓冲区尾</span><br>        *p++ = <span class="hljs-string">'/'</span>; <span class="hljs-comment">// 路径格式</span><br>        <span class="hljs-keyword">while</span>(read(fd, &amp;de, <span class="hljs-keyword">sizeof</span>(de)) == <span class="hljs-keyword">sizeof</span>(de)) <span class="hljs-comment">// 读到子文件</span><br>        {<br>            <span class="hljs-keyword">if</span>(de.inum == <span class="hljs-number">0</span> || !<span class="hljs-built_in">strcmp</span>(de.name, <span class="hljs-string">"."</span>) || !<span class="hljs-built_in">strcmp</span>(de.name, <span class="hljs-string">".."</span>)) <span class="hljs-comment">// 过滤无效目录和.，..两个目录</span><br>                <span class="hljs-keyword">continue</span>;<br>            memmove(p, de.name, DIRSIZ); <span class="hljs-comment">// 将子文件名拷贝到缓冲区</span><br>            p[DIRSIZ] = <span class="hljs-number">0</span>; <span class="hljs-comment">// 加尾符'\0'</span><br>            <span class="hljs-keyword">if</span>(stat(buf, &amp;st) &lt; <span class="hljs-number">0</span>) <span class="hljs-comment">// 获取子目录信息</span><br>            {<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">"ls: cannot stat %s\n"</span>, buf);<br>                <span class="hljs-keyword">continue</span>;<br>            }<br>            find(buf, fileName); <span class="hljs-comment">// 子目录有效递归查找</span><br>    }<br>    <span class="hljs-keyword">break</span>;<br>  }<br>  close(fd); <span class="hljs-comment">// 关闭文件</span><br>}<br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span><br>{<br>    <span class="hljs-keyword">if</span>(argc &gt; <span class="hljs-number">3</span> || argc &lt; <span class="hljs-number">3</span>) <span class="hljs-comment">// 检查参数个数</span><br>    {<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"The usage like \"find path file_name\" ...\n"</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    }<br>    find(argv[<span class="hljs-number">1</span>], argv[<span class="hljs-number">2</span>]); <span class="hljs-comment">// 寻找文件</span><br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>}<br></code></pre></td></tr></table></figure></li></ul><h3 id="参考链接-2"><a href="#参考链接-2" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://zhuanlan.zhihu.com/p/508045883">MIT 6.S081课程Lab Util Find全网最详细思路分享/个人学习笔记</a></li></ul><h2 id="xargs"><a href="#xargs" class="headerlink" title="xargs"></a>xargs</h2><h3 id="主要思路-3"><a href="#主要思路-3" class="headerlink" title="主要思路"></a>主要思路</h3><ul><li><p>检查参数</p><ul><li>若参数个数小于2则异常退出</li></ul></li><li><p>建立新字符串数组作为exec执行参数</p><ul><li>新字符串数组<code>nargv</code>,其初值等于<code>argv</code>数组的<code>1</code>-<code>（argc - 1）</code>项</li><li>从标准输入流中读取数据</li><li>将上述数据通过<code>\n</code>分开，存入字符串数组中</li><li>遍历字符串数组，分别将其当作<code>nargv</code>中的下一个元素，将<code>nargv</code>的末元素置为0，建立子进程以<code>nargv</code>作为参数执行<code>exec</code>函数</li></ul></li><li><p>代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">"kernel/param.h"</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">"kernel/types.h"</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">"kernel/stat.h"</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">"user/user.h"</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span><br>{<br>    <span class="hljs-keyword">if</span>(argc &lt; <span class="hljs-number">2</span>) <span class="hljs-comment">// 检查参数个数</span><br>    {<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-number">2</span>, <span class="hljs-string">"Need more arguments..."</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    }<br><br>    <span class="hljs-type">char</span> *nargv[<span class="hljs-number">16</span>]; <span class="hljs-comment">// xargs命令要调用的参数</span><br>    <span class="hljs-type">int</span> index = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; argc; ++i)<br>    {<br>        nargv[index ++] = argv[i];<br>    }<br><br>    <span class="hljs-type">char</span> buf[<span class="hljs-number">512</span>]; <span class="hljs-comment">// 从标准输入流中读取数据</span><br>    <span class="hljs-type">char</span>* buff = buf; <span class="hljs-comment">// 用于后续分割buf中的不同行</span><br>    <span class="hljs-type">char</span>* p = buf; <span class="hljs-comment">// 用于将输入接到buf的尾部</span><br>    <span class="hljs-type">int</span> readBuf;<br>    <span class="hljs-keyword">while</span>((readBuf = read(<span class="hljs-number">0</span>, p, <span class="hljs-number">16</span>)) &gt; <span class="hljs-number">0</span>) <span class="hljs-comment">// 读入标准输出的内容</span><br>    {<br>        p += readBuf;<br>        *p = <span class="hljs-string">'\0'</span>;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strlen</span>(buf) &gt; <span class="hljs-number">512</span>)<br>        {<br>            <span class="hljs-built_in">fprintf</span>(<span class="hljs-number">2</span>, <span class="hljs-string">"too many arguments"</span>);<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>        }<br>    }<br><br>    <span class="hljs-type">char</span>* nargvMem[<span class="hljs-number">32</span>]; <span class="hljs-comment">// 第i行的输出为nargvMen[i]</span><br>    <span class="hljs-type">int</span> nindex = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">char</span>* q = buf; q != p; ++q) <span class="hljs-comment">// 对buf根据不同行进行分割</span><br>    {<br>        <span class="hljs-keyword">if</span>(*q == <span class="hljs-string">'\n'</span>)<br>        {<br>            *q = <span class="hljs-string">'\0'</span>;<br>            nargvMem[nindex ++] = buff;<br>            buff = q + <span class="hljs-number">1</span>;<br>        }<br>    }<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; nindex; ++i) <span class="hljs-comment">// 用nargv进行执行exec()操作，通过更改nargv[index]的值实现不同行输出的执行</span><br>    {<br>        nargv[index ++] = nargvMem[i];<br>        nargv[index] = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span>(fork() == <span class="hljs-number">0</span>)<br>        {<br>            exec(nargv[<span class="hljs-number">0</span>], nargv);<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>        }<br>        <span class="hljs-keyword">else</span><br>        {<br>            index--;<br>            wait(<span class="hljs-number">0</span>);<br>        }<br>    }<br><br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>}<br></code></pre></td></tr></table></figure></li></ul><h3 id="参考链接-3"><a href="#参考链接-3" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://www.runoob.com/linux/linux-comm-grep.html">Linux grep 命令</a></li><li><a href="https://www.cnblogs.com/liujunjun/p/11977906.html">xargs原理及用法详解</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Lab-1&quot;&gt;&lt;a href=&quot;#Lab-1&quot; class=&quot;headerlink&quot; title=&quot;Lab 1&quot;&gt;&lt;/a&gt;Lab 1&lt;/h1&gt;&lt;h2 id=&quot;sleep&quot;&gt;&lt;a href=&quot;#sleep&quot; class=&quot;headerlink&quot; title=&quot;sle</summary>
      
    
    
    
    <category term="xv6-Lab" scheme="https://ma-b21.github.io/categories/xv6-Lab/"/>
    
    <category term="操作系统" scheme="https://ma-b21.github.io/categories/xv6-Lab/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="操作系统" scheme="https://ma-b21.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="MIT-xv6" scheme="https://ma-b21.github.io/tags/MIT-xv6/"/>
    
    <category term="c" scheme="https://ma-b21.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>洛谷P1124题解——文件压缩</title>
    <link href="https://ma-b21.github.io/2023/06/05/%E6%B4%9B%E8%B0%B7P1124%E9%A2%98%E8%A7%A3%E2%80%94%E2%80%94%E6%96%87%E4%BB%B6%E5%8E%8B%E7%BC%A9/"/>
    <id>https://ma-b21.github.io/2023/06/05/%E6%B4%9B%E8%B0%B7P1124%E9%A2%98%E8%A7%A3%E2%80%94%E2%80%94%E6%96%87%E4%BB%B6%E5%8E%8B%E7%BC%A9/</id>
    <published>2023-06-04T16:13:17.185Z</published>
    <updated>2022-07-04T03:01:19.787Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>原题链接：<a href="https://www.luogu.com.cn/problem/P1124">P1124-文件压缩</a></p><p>原题：</p><p>题目描述</p><p>该算法具体如下：对一个长度为 <code>n</code> 的字符串 <code>S</code>，首先根据它构造 <code>n</code> 个字符串，其中第 <code>i</code> 个字符串由将 <code>S</code> 的前 <code>i−1</code> 个字符置于末尾得到。然后把这 <code>n</code> 个字符串按照首字符从小到大排序，如果两个字符串的首字符相等，则按照它们在 <code>S</code> 中的位置从小到大排序。排序后的字符串的尾字符可以组成一个新的字符串 <code>S′</code>，它的长度也是 <code>n</code>，并且包含了 <code>S</code> 中的每一个字符。最后输出 <code>S′</code> 以及 <code>S</code> 的首字符在 <code>S′</code> 中的位置 <code>p</code>。</p><p>举例：S 是 <code>example</code></p><ol><li><p>构造 <code>n</code> 个字符串。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">example<br>xamplee<br>ampleex<br>mpleexa<br>pleexam<br>leexamp<br>eexampl<br></code></pre></td></tr></table></figure></li><li><p>将字符串排序。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">ampleex<br>example<br>eexampl<br>leexamp<br>mpleexa<br>pleexam<br>xamplee<br></code></pre></td></tr></table></figure></li><li><p>压缩结果。</p><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.452ex;" xmlns="http://www.w3.org/2000/svg" width="21.046ex" height="2.149ex" role="img" focusable="false" viewBox="0 -750 9302.1 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(645,0)"><g data-mml-node="mo"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"></path></g></g><g data-mml-node="mo" transform="translate(1197.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(2253.6,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(2825.6,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(3291.6,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(3589.6,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(4092.6,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(4621.6,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(5499.6,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(5965.6,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">，</text></g><g data-mml-node="mi" transform="translate(6965.6,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mo" transform="translate(7746.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(8802.1,0)"><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z"></path></g></g></g></svg></mjx-container></p></li></ol><p>在读题过程中不难发现，当我们将压缩结果按字典序排列时可以得到<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.131ex" height="1.507ex" role="img" focusable="false" viewBox="0 -666 500 666"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></svg></mjx-container>中首字母序列，从而我们可以得到每个字母的前驱或者后继。因此我们可以利用这个规律来找到原字符串。这里我们选择先找到尾字符，然后找每个字母的前驱，最后反向输出，这样做的原因是正向寻找时按照压缩字符串寻找，无规律，容易乱序，而逆向寻找靠排序串，不致乱序。</p><h2 id="c-实现"><a href="#c-实现" class="headerlink" title="c++实现"></a>c++实现</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span><span class="hljs-comment">//可食用头文件</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>{<br>    <span class="hljs-type">int</span> n,shou,now;<span class="hljs-comment">//n为S串长度，shou即为题目中p，首字母所在压缩后的位置，now为现在进行到哪个位置了</span><br>    cin&gt;&gt;n;<span class="hljs-comment">//输入</span><br>    <span class="hljs-type">char</span> a[n],b[n],ans[n];<span class="hljs-comment">//a——压缩串，b——字典序串，ans——答案串</span><br>    cin&gt;&gt;a&gt;&gt;shou;<span class="hljs-comment">//万能cin</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)b[i]=a[i];<span class="hljs-comment">//a带给b</span><br>    <span class="hljs-built_in">sort</span>(b,b+n);<span class="hljs-comment">//自动排序</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<span class="hljs-comment">//首先按首字母找到最后一个字母</span><br>    {<br>        <span class="hljs-keyword">if</span>(b[i]==a[shou<span class="hljs-number">-1</span>])<br>        {<br>            now=i;<br>            b[i]=<span class="hljs-string">')'</span>;<span class="hljs-comment">//标记，退出</span><br>            <span class="hljs-keyword">break</span>;<br>        }<br>    }<br>    ans[<span class="hljs-number">0</span>]=a[now];<span class="hljs-comment">//计入答案</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;n;i++)<span class="hljs-comment">//ans[i]表示倒数第i+1个字母</span><br>    {<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=n<span class="hljs-number">-1</span>;j&gt;=<span class="hljs-number">0</span>;j--)<span class="hljs-comment">//从后往前搜到第一个与原char串匹配的字典序串</span><br>        {<br>            <span class="hljs-keyword">if</span>(b[j]==a[now])<br>            {<br>                now=j;<span class="hljs-comment">//更改现在所在位置，即跳到前一个字母</span><br>                ans[i]=a[now];<span class="hljs-comment">//计入答案</span><br>                b[j]=<span class="hljs-string">')'</span>;<span class="hljs-comment">//标记</span><br>                <span class="hljs-keyword">break</span>;<br>            }<br>        }    <br>    }<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=n<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)cout&lt;&lt;ans[i];<span class="hljs-comment">//倒序输出</span><br>}<br></code></pre></td></tr></table></figure><h2 id="python实现"><a href="#python实现" class="headerlink" title="python实现"></a>python实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python">n=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<span class="hljs-comment">#字符串长度</span><br>s=<span class="hljs-built_in">input</span>()<span class="hljs-comment">#压缩串</span><br>pos=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<span class="hljs-comment">#压缩串中首字母位置</span><br>pos=pos-<span class="hljs-number">1</span><br>box=[]<span class="hljs-comment">#压缩串得到列表</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>    box.append(s[i])<br>boxs=box.copy()<br>boxs.sort()<span class="hljs-comment">#字典序列表</span><br>res=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,n):<br>    <span class="hljs-keyword">if</span> boxs[i]==box[pos]:<br>        pos=i<br>        boxs[i]=<span class="hljs-string">'0'</span><br>        res.append(box[pos])<br>        <span class="hljs-keyword">break</span><br>    <br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">if</span> boxs[i]==box[pos]:<br>            pos=i<br>            res.append(box[pos])<br>            boxs[i]=<span class="hljs-string">'0'</span><br>            <span class="hljs-keyword">break</span><br>            <br>ans=<span class="hljs-string">""</span><br>res.reverse()<br><span class="hljs-keyword">for</span> each <span class="hljs-keyword">in</span> res:<br>    ans=ans+each<br><span class="hljs-built_in">print</span>(ans)<br><br><br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;原题链接：&lt;a href=&quot;https://www.luogu.com.cn/problem/P1124&quot;&gt;P1124-文件压缩&lt;/a&gt;&lt;/</summary>
      
    
    
    
    <category term="题解" scheme="https://ma-b21.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="python" scheme="https://ma-b21.github.io/tags/python/"/>
    
    <category term="洛谷" scheme="https://ma-b21.github.io/tags/%E6%B4%9B%E8%B0%B7/"/>
    
    <category term="c++" scheme="https://ma-b21.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://ma-b21.github.io/2023/06/05/hello-world/"/>
    <id>https://ma-b21.github.io/2023/06/05/hello-world/</id>
    <published>2023-06-04T16:13:17.182Z</published>
    <updated>2022-06-04T03:49:54.208Z</updated>
    
    <content type="html"><![CDATA[<h2 id="经典Hello-World开局"><a href="#经典Hello-World开局" class="headerlink" title="经典Hello World开局"></a>经典Hello World开局</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">cout&lt;&lt;"Hello World"&lt;&lt;endl;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;经典Hello-World开局&quot;&gt;&lt;a href=&quot;#经典Hello-World开局&quot; class=&quot;headerlink&quot; title=&quot;经典Hello World开局&quot;&gt;&lt;/a&gt;经典Hello World开局&lt;/h2&gt;&lt;figure class=&quot;highli</summary>
      
    
    
    
    <category term="杂谈" scheme="https://ma-b21.github.io/categories/%E6%9D%82%E8%B0%88/"/>
    
    
    <category term="hello world" scheme="https://ma-b21.github.io/tags/hello-world/"/>
    
  </entry>
  
  <entry>
    <title>C语言函数</title>
    <link href="https://ma-b21.github.io/2023/06/05/function%E2%80%94%E2%80%94C%E8%AF%AD%E8%A8%80%E5%87%BD%E6%95%B0/"/>
    <id>https://ma-b21.github.io/2023/06/05/function%E2%80%94%E2%80%94C%E8%AF%AD%E8%A8%80%E5%87%BD%E6%95%B0/</id>
    <published>2023-06-04T16:13:17.180Z</published>
    <updated>2023-03-24T03:21:25.410Z</updated>
    
    <content type="html"><![CDATA[<h2 id="函数简介："><a href="#函数简介：" class="headerlink" title="函数简介："></a>函数简介：</h2><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>和数学上的函数定义类似，C语言中的函数就是对给定的输入变量<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.294ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 572 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g></g></svg></mjx-container>,返回对应的函数值<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="1.109ex" height="1.464ex" role="img" focusable="false" viewBox="0 -442 490 647"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container>,或者对<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.294ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 572 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g></g></svg></mjx-container>进行一定的操作。</p><p>不同的是在C语言的函数当中，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.294ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 572 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g></g></svg></mjx-container>可以为<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.176ex;" xmlns="http://www.w3.org/2000/svg" width="1.131ex" height="1.923ex" role="img" focusable="false" viewBox="0 -772 500 850"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="2205" d="M331 696Q335 708 339 722T345 744T350 759T357 769T367 772Q374 772 381 767T388 754Q388 746 377 712L366 673L378 661Q460 575 460 344Q460 281 456 234T432 126T373 27Q319 -22 250 -22Q214 -22 180 -7Q168 -3 168 -4L159 -33Q148 -71 142 -75Q138 -78 132 -78Q124 -78 118 -72T111 -60Q111 -52 122 -18L133 21L125 29Q39 111 39 344Q39 596 137 675Q187 716 251 716Q265 716 278 714T296 710T315 703T331 696ZM276 676Q264 679 246 679Q196 679 159 631Q134 597 128 536T121 356Q121 234 127 174T151 80L234 366Q253 430 275 506T308 618L318 654Q318 656 294 669L276 676ZM181 42Q207 16 250 16Q291 16 324 47Q354 78 366 136T378 356Q378 470 372 528T349 616L348 613Q348 611 264 326L181 42Z"></path></g></g></g></svg></mjx-container>,即没有函数的输入，只是在函数体中进行一定的操作。</p><p>最常见的函数就是<code>main</code>函数，之前讲过每个程序都需要有一个<code>main</code>函数作为程序入口，程序所进行的操作实际就是<code>main</code>函数里的内容。</p><p>函数最大的意义就是可以进行模块化编程，简单来说就是对同一类问题可以只用一个函数求解，类比数学中的函数就是我们对确定的<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="4.299ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 1900 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(550,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(939,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(1511,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>可以只编写一个程序，无论<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.294ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 572 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g></g></svg></mjx-container>的取值，我们都可以用这一个程序来求解，这一个程序就可以成为一个模块，而需要求解的问题就可以通过对其几个子问题模块的组合来解决。</p><h3 id="函数分类"><a href="#函数分类" class="headerlink" title="函数分类"></a>函数分类</h3><h4 id="库函数"><a href="#库函数" class="headerlink" title="库函数"></a>库函数</h4><p>库函数包含在各个头文件里，比如平时最常用的<code>scanf</code>,<code>printf</code>也是函数（包含在<code>&lt;stdio.h&gt;</code>库中），除此之外<code>&lt;cmath&gt;</code>头文件中有定义好的各种数学运算函数，如<code>sqrt(平方根)</code>，<code>floor(下取整)</code>，<code>pow(求幂)</code>等等，还有<code>&lt;cstring&gt;</code>等各种库，只需要记住最常用的一些即可。标准库中的函数我们所要做的就是在程序中包含头文件之后直接调用。</p><h4 id="用户自定义函数"><a href="#用户自定义函数" class="headerlink" title="用户自定义函数"></a>用户自定义函数</h4><p>这是重点部分，自定义函数就是我们去仿照标准库，去实现一些具有我们想要的功能的函数，具体的定义方法，声明方法等后面补充。</p><h4 id="main函数"><a href="#main函数" class="headerlink" title="main函数"></a><code>main</code>函数</h4><p>程序入口，不再赘述。</p><h2 id="函数的使用："><a href="#函数的使用：" class="headerlink" title="函数的使用："></a>函数的使用：</h2><h3 id="函数的声明和定义"><a href="#函数的声明和定义" class="headerlink" title="函数的声明和定义"></a>函数的声明和定义</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">myfunc</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>; <span class="hljs-comment">// 函数的声明（declaration）</span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">myfunc</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>  <span class="hljs-comment">// 函数的定义（definition） </span><br>{<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"This is my function..."</span>);<br>    <span class="hljs-keyword">return</span>;<br>}<br></code></pre></td></tr></table></figure><p>函数的声明和定义的基本语法如上，声明和定义的区别就是声明告诉了编译器有个函数叫<code>myfunc</code>,但是编译器不一定知道这个函数是做什么的；而定义则不仅告诉了编译器有这个函数，而且告诉了编译器这个函数可以干什么。</p><p>之后我们细看函数定义的语法，<code>void myfunc(void)</code>中，前面的<code>void</code>代表的是返回值类型（Return Type），后面的<code>void</code>代表的是函数参数(Parameters)。函数的返回值可以理解为<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="8.424ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 3723.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(767.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(1823.6,0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(2373.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(2762.6,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(3334.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>，而函数参数就可以理解为<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.294ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 572 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g></g></svg></mjx-container>,若有多个参数用<code>,</code>隔开。</p><p>返回值类型就是C语言中的数据类型，比如<code>int</code>,<code>float</code>,<code>double</code>,<code>char</code>等等，而参数则可以有多个，对应数学中的多元函数，下面给出一个求圆面积的例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> PI 3.1415926</span><br><span class="hljs-type">double</span> <span class="hljs-title function_">getCircleArea</span><span class="hljs-params">(<span class="hljs-type">double</span> radius)</span><br>{<br>    <span class="hljs-type">double</span> area = PI * radius * radius;<br>    <span class="hljs-keyword">return</span> area;<br>}<br></code></pre></td></tr></table></figure><p>需要注意的是函数定义的返回值类型和在函数体中返回的类型要一致，如上面的例子中，圆面积area是<code>double</code>类型，函数的返回值也是<code>double</code>类型，因此函数体返回的语句为<code>return area</code>.再比如<code>main</code>函数一般为<code>int main()</code>,<code>return 0;</code>。</p><p>回到开始的例子，</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">myfunc</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> <br>{<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"This is my function..."</span>);<br>    <span class="hljs-keyword">return</span>;<br>}<br></code></pre></td></tr></table></figure><p>之前知道C语言中<code>void</code>代表忽略或者没有，所以这个例子中的函数1.不需要参数。2.没有返回值。</p><h3 id="函数的调用："><a href="#函数的调用：" class="headerlink" title="函数的调用："></a>函数的调用：</h3><h4 id="自定义函数在程序中的结构"><a href="#自定义函数在程序中的结构" class="headerlink" title="自定义函数在程序中的结构"></a>自定义函数在程序中的结构</h4><h5 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-comment">// 函数的声明</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>{<br>    <span class="hljs-comment">// 调用函数</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br><br><span class="hljs-comment">// 函数的定义</span><br></code></pre></td></tr></table></figure><p>eg:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">myfunc</span><span class="hljs-params">()</span>; <span class="hljs-comment">// 声明</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>{<br>    myfunc();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">myfunc</span><span class="hljs-params">()</span><br>{<br>    <span class="hljs-comment">// To do ...</span><br>    <span class="hljs-keyword">return</span>;<br>}<br></code></pre></td></tr></table></figure><h5 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-comment">// 函数的声明兼定义</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>{<br>    <span class="hljs-comment">// 调用函数</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></table></figure><p>eg:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">myfunc</span><span class="hljs-params">()</span><br>{<br>    <span class="hljs-comment">// To do ...</span><br>    <span class="hljs-keyword">return</span>;<br>}<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>{<br>    myfunc();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></table></figure><h4 id="调用时返回值类型与等号左值相对应"><a href="#调用时返回值类型与等号左值相对应" class="headerlink" title="调用时返回值类型与等号左值相对应"></a>调用时返回值类型与等号左值相对应</h4><p>eg:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PI 3.1415926</span><br><br><span class="hljs-type">double</span> <span class="hljs-title function_">getCircleArea</span><span class="hljs-params">(<span class="hljs-type">double</span> radius)</span><br>{<br>    <span class="hljs-type">double</span> area = PI * radius * radius;<br>    <span class="hljs-keyword">return</span> area;<br>}<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>{<br>    <span class="hljs-type">double</span> radius = <span class="hljs-number">4</span>;<br>    <span class="hljs-type">double</span> area = getCircleArea(radius);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></table></figure><h4 id="嵌套调用：函数不止在主函数中可以调用，在一个函数中可以调用另一个函数"><a href="#嵌套调用：函数不止在主函数中可以调用，在一个函数中可以调用另一个函数" class="headerlink" title="嵌套调用：函数不止在主函数中可以调用，在一个函数中可以调用另一个函数"></a>嵌套调用：函数不止在主函数中可以调用，在一个函数中可以调用另一个函数</h4><p>eg:见ppt Page.19</p><p>需要注意的是如果函数A在函数B中被调用,A一定要在B的定义之前被声明。</p><h2 id="变量："><a href="#变量：" class="headerlink" title="变量："></a>变量：</h2><h3 id="形参和实参："><a href="#形参和实参：" class="headerlink" title="形参和实参："></a>形参和实参：</h3><p>形参是指函数定义和声明中的参数，而实参是指调用函数时传入的参数</p><p>eg:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> A, <span class="hljs-type">int</span> B)</span><br>{<br>    <span class="hljs-keyword">return</span> A + B;<br>}<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>{<br>    <span class="hljs-type">int</span> a = <span class="hljs-number">4</span>, b = <span class="hljs-number">5</span>;<br>    <span class="hljs-type">int</span> c = add(a, b);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></table></figure><p>上述代码中A,B为形参， a,b为实参。（形参和实参可以同名）</p><h3 id="变量的作用域："><a href="#变量的作用域：" class="headerlink" title="变量的作用域："></a>变量的作用域：</h3><p>一般来说，变量的作用域就是定义变量的那一个语句块（那一对大括号之间）。</p><p>eg:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> global;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>{<br>    <span class="hljs-type">int</span> a;<br>    <span class="hljs-keyword">if</span>(a == <span class="hljs-number">0</span>)<br>    {<br>        <span class="hljs-type">int</span> b;<br>    }<br>    <span class="hljs-keyword">else</span><br>    {<br>        <span class="hljs-type">int</span> c;<br>    }<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></table></figure><p>如上述例子，变量a的作用域是整个main函数，而b，c的作用域则是它们各自所在的if语句块。</p><p>a,b,c都统称局部变量，除此之外，也有特殊变量叫全局变量，它定义在main函数之前，作用域是整个程序。</p><p>注意，自定义函数的参数属于局部变量，它的作用域就是函数体内。</p><h3 id="变量类型："><a href="#变量类型：" class="headerlink" title="变量类型："></a>变量类型：</h3><h4 id="auto和register"><a href="#auto和register" class="headerlink" title="auto和register"></a>auto和register</h4><p>逐渐弃用，看看ppt就行</p><h4 id="static"><a href="#static" class="headerlink" title="static:"></a>static:</h4><p>用在局部变量，延长变量寿命，在函数体中的变量若没有static,每次调用后都会被释放，每次调用时都是重新申请资源，而static修饰后每次调用都是在上次调用的基础上。</p><p>用在全局变量，单文件没影响，多文件本来全局变量是多个文件互通，加static修饰后只在当前文件内可用。</p><h4 id="extern"><a href="#extern" class="headerlink" title="extern:"></a>extern:</h4><p>在其他文件内定义的变量使用前声明时用到extern.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;函数简介：&quot;&gt;&lt;a href=&quot;#函数简介：&quot; class=&quot;headerlink&quot; title=&quot;函数简介：&quot;&gt;&lt;/a&gt;函数简介：&lt;/h2&gt;&lt;h3 id=&quot;函数&quot;&gt;&lt;a href=&quot;#函数&quot; class=&quot;headerlink&quot; title=&quot;函数&quot;&gt;&lt;/a&gt;函</summary>
      
    
    
    
    <category term="语法总结" scheme="https://ma-b21.github.io/categories/%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    
    <category term="C语言" scheme="https://ma-b21.github.io/categories/%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93/C%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="C语言" scheme="https://ma-b21.github.io/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>C语言输入输出总结</title>
    <link href="https://ma-b21.github.io/2023/06/05/C%E8%AF%AD%E8%A8%80%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E6%80%BB%E7%BB%93/"/>
    <id>https://ma-b21.github.io/2023/06/05/C%E8%AF%AD%E8%A8%80%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E6%80%BB%E7%BB%93/</id>
    <published>2023-06-04T16:13:17.178Z</published>
    <updated>2023-03-09T15:20:29.922Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C语言输入输出总结"><a href="#C语言输入输出总结" class="headerlink" title="C语言输入输出总结"></a>C语言输入输出总结</h1><h3 id="c-——-char-单个字符类型"><a href="#c-——-char-单个字符类型" class="headerlink" title="%c —— char, 单个字符类型"></a>%c —— char, 单个字符类型</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span> <span class="hljs-params">()</span><br>{<br>    <span class="hljs-type">char</span> ch; <span class="hljs-comment">//或者 unsigned char ch;</span><br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%c"</span>,&amp;ch);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%c"</span>,ch);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></table></figure><h3 id="d-——-int-十进制整型"><a href="#d-——-int-十进制整型" class="headerlink" title="%d —— int, 十进制整型"></a>%d —— int, 十进制整型</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span> <span class="hljs-params">()</span><br>{<br>    <span class="hljs-type">int</span> a;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,a);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d"</span>,a);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></table></figure><p><strong>(拓展：输出时%nd ，等宽输出，宽度为n，不等宽时补空格；%0nd或者%.nd补0)</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span> <span class="hljs-params">()</span><br>{<br>    <span class="hljs-type">const</span> <span class="hljs-type">int</span> n = <span class="hljs-number">8</span>;<br>    <span class="hljs-type">int</span> count[n] = {<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">17</span>,<span class="hljs-number">18</span>,<span class="hljs-number">19</span>,<span class="hljs-number">20</span>};<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    {<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%2d\n"</span>,count[i]);<br>    }<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs markdown"> 1<br> 2<br> 3<br> 4<br>17<br>18<br>19<br>20<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span> <span class="hljs-params">()</span><br>{<br>    <span class="hljs-type">const</span> <span class="hljs-type">int</span> n = <span class="hljs-number">8</span>;<br>    <span class="hljs-type">int</span> count[n] = {<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">17</span>,<span class="hljs-number">18</span>,<span class="hljs-number">19</span>,<span class="hljs-number">20</span>};<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    {<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%02d\n"</span>,count[i]);<br>       <span class="hljs-comment">//或者printf("%.2d\n",count[i]);</span><br>    }<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">01<br>02<br>03<br>04<br>17<br>18<br>19<br>20<br></code></pre></td></tr></table></figure><h3 id="ld-——-long-长整型"><a href="#ld-——-long-长整型" class="headerlink" title="%ld —— long, 长整型"></a>%ld —— long, 长整型</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span> <span class="hljs-params">()</span><br>{<br>    <span class="hljs-type">long</span> a;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%ld"</span>,&amp;a);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%ld"</span>,a);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></table></figure><h3 id="lld-——-long-long-长整型"><a href="#lld-——-long-long-长整型" class="headerlink" title="%lld —— long long, 长整型"></a>%lld —— long long, 长整型</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span> <span class="hljs-params">()</span><br>{<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> a;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%lld"</span>,&amp;a);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld"</span>,a);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></table></figure><h3 id="hd-——-short，短整型"><a href="#hd-——-short，短整型" class="headerlink" title="%hd —— short，短整型"></a>%hd —— short，短整型</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span> <span class="hljs-params">()</span><br>{<br>    <span class="hljs-type">short</span> a;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%hd"</span>,&amp;a);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%hd"</span>,a);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></table></figure><h2 id="（int，long，longlong，short区别）"><a href="#（int，long，longlong，short区别）" class="headerlink" title="（int，long，longlong，short区别）"></a>（int，long，longlong，short区别）</h2><p>int                -2147483648~2147483647(10位十进制数)</p><p>short            -32768~32767(5位十进制数)</p><p>long             -2147483648~2147483647(10位十进制数)</p><p>long long     -9223372036854775808~9223372036854775807(20位十进制数)</p><h3 id="f-——float-单精度浮点数"><a href="#f-——float-单精度浮点数" class="headerlink" title="%f ——float, 单精度浮点数"></a>%f ——float, 单精度浮点数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>{<br>    <span class="hljs-type">float</span> a;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%f"</span>,&amp;a);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%f"</span>,a);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></table></figure><h3 id="lf-——-double-双精度浮点数"><a href="#lf-——-double-双精度浮点数" class="headerlink" title="%lf —— double, 双精度浮点数"></a>%lf —— double, 双精度浮点数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>{<br>    <span class="hljs-type">float</span> a;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%lf"</span>,&amp;a);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lf"</span>,a);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></table></figure><p><strong>(拓展：%.nf或%.nlf可以输出四舍五入后的n位小数)</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;C语言输入输出总结&quot;&gt;&lt;a href=&quot;#C语言输入输出总结&quot; class=&quot;headerlink&quot; title=&quot;C语言输入输出总结&quot;&gt;&lt;/a&gt;C语言输入输出总结&lt;/h1&gt;&lt;h3 id=&quot;c-——-char-单个字符类型&quot;&gt;&lt;a href=&quot;#c-——-char</summary>
      
    
    
    
    <category term="语法总结" scheme="https://ma-b21.github.io/categories/%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    
    <category term="C语言" scheme="https://ma-b21.github.io/categories/%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93/C%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="C语言" scheme="https://ma-b21.github.io/tags/C%E8%AF%AD%E8%A8%80/"/>
    
    <category term="语法" scheme="https://ma-b21.github.io/tags/%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>VMware 让虚拟机通过主机代理上网</title>
    <link href="https://ma-b21.github.io/2023/06/03/%E8%99%9A%E6%8B%9F%E6%9C%BAVMware-%E7%94%A8%E4%B8%BB%E6%9C%BA%E4%BB%A3%E7%90%86%E4%B8%8A%E7%BD%91/"/>
    <id>https://ma-b21.github.io/2023/06/03/%E8%99%9A%E6%8B%9F%E6%9C%BAVMware-%E7%94%A8%E4%B8%BB%E6%9C%BA%E4%BB%A3%E7%90%86%E4%B8%8A%E7%BD%91/</id>
    <published>2023-06-03T15:58:33.000Z</published>
    <updated>2023-06-04T15:58:55.203Z</updated>
    
    <content type="html"><![CDATA[<p>Ubuntu 20.04.6 LTS</p><p>VMware Workstation 17 Pro 17.0.0</p><p>windows 10</p><p>首先更改虚拟机的网络适配器设置如下：</p><p class='item-img' data-src='/2023/06/03/%E8%99%9A%E6%8B%9F%E6%9C%BAVMware-%E7%94%A8%E4%B8%BB%E6%9C%BA%E4%BB%A3%E7%90%86%E4%B8%8A%E7%BD%91/%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%80%82%E9%85%8D%E5%99%A8%E8%AE%BE%E7%BD%AE.png'><img src="/2023/06/03/%E8%99%9A%E6%8B%9F%E6%9C%BAVMware-%E7%94%A8%E4%B8%BB%E6%9C%BA%E4%BB%A3%E7%90%86%E4%B8%8A%E7%BD%91/%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%80%82%E9%85%8D%E5%99%A8%E8%AE%BE%E7%BD%AE.png" alt="虚拟机网络适配器设置"></p><p>之后打开代理软件，允许局域网连接并记录端口号（v2rayN为例）：</p><p class='item-img' data-src='/2023/06/03/%E8%99%9A%E6%8B%9F%E6%9C%BAVMware-%E7%94%A8%E4%B8%BB%E6%9C%BA%E4%BB%A3%E7%90%86%E4%B8%8A%E7%BD%91/%E4%BB%A3%E7%90%86%E8%BD%AF%E4%BB%B6%E8%AE%BE%E7%BD%AE.png'><img src="/2023/06/03/%E8%99%9A%E6%8B%9F%E6%9C%BAVMware-%E7%94%A8%E4%B8%BB%E6%9C%BA%E4%BB%A3%E7%90%86%E4%B8%8A%E7%BD%91/%E4%BB%A3%E7%90%86%E8%BD%AF%E4%BB%B6%E8%AE%BE%E7%BD%AE.png" alt="代理软件设置"></p><p>命令行输入ipconfig，得到主机ip地址：</p><p class='item-img' data-src='/2023/06/03/%E8%99%9A%E6%8B%9F%E6%9C%BAVMware-%E7%94%A8%E4%B8%BB%E6%9C%BA%E4%BB%A3%E7%90%86%E4%B8%8A%E7%BD%91/%E6%9C%AC%E6%9C%BAip.png'><img src="/2023/06/03/%E8%99%9A%E6%8B%9F%E6%9C%BAVMware-%E7%94%A8%E4%B8%BB%E6%9C%BA%E4%BB%A3%E7%90%86%E4%B8%8A%E7%BD%91/%E6%9C%AC%E6%9C%BAip.png" alt="本机ip"></p><p>打开Ubuntu网络设置，代理设置改为手动，输入本机ip地址，只需要填端口号即可：</p><p class='item-img' data-src='/2023/06/03/%E8%99%9A%E6%8B%9F%E6%9C%BAVMware-%E7%94%A8%E4%B8%BB%E6%9C%BA%E4%BB%A3%E7%90%86%E4%B8%8A%E7%BD%91/%E7%AB%AF%E5%8F%A3%E5%8F%B7.png'><img src="/2023/06/03/%E8%99%9A%E6%8B%9F%E6%9C%BAVMware-%E7%94%A8%E4%B8%BB%E6%9C%BA%E4%BB%A3%E7%90%86%E4%B8%8A%E7%BD%91/%E7%AB%AF%E5%8F%A3%E5%8F%B7.png" alt="端口号"></p><p>需要注意，虽然之前得到监听端口为8888,但在v2rayN中局域网连接的端口一般为为监听端口+2~+3，因此此处端口为8890，如下图：</p><p class='item-img' data-src='/2023/06/03/%E8%99%9A%E6%8B%9F%E6%9C%BAVMware-%E7%94%A8%E4%B8%BB%E6%9C%BA%E4%BB%A3%E7%90%86%E4%B8%8A%E7%BD%91/%E7%AB%AF%E5%8F%A3.png'><img src="/2023/06/03/%E8%99%9A%E6%8B%9F%E6%9C%BAVMware-%E7%94%A8%E4%B8%BB%E6%9C%BA%E4%BB%A3%E7%90%86%E4%B8%8A%E7%BD%91/%E7%AB%AF%E5%8F%A3.png" alt="端口"></p><p>至此虚拟机就可以用宿主机的代理愉快上网啦：</p><p class='item-img' data-src='/2023/06/03/%E8%99%9A%E6%8B%9F%E6%9C%BAVMware-%E7%94%A8%E4%B8%BB%E6%9C%BA%E4%BB%A3%E7%90%86%E4%B8%8A%E7%BD%91/result.png'><img src="/2023/06/03/%E8%99%9A%E6%8B%9F%E6%9C%BAVMware-%E7%94%A8%E4%B8%BB%E6%9C%BA%E4%BB%A3%E7%90%86%E4%B8%8A%E7%BD%91/result.png" alt="result"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Ubuntu 20.04.6 LTS&lt;/p&gt;
&lt;p&gt;VMware Workstation 17 Pro 17.0.0&lt;/p&gt;
&lt;p&gt;windows 10&lt;/p&gt;
&lt;p&gt;首先更改虚拟机的网络适配器设置如下：&lt;/p&gt;
&lt;p class=&#39;item-img&#39; data-src=&#39;</summary>
      
    
    
    
    <category term="虚拟机" scheme="https://ma-b21.github.io/categories/%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
    
    <category term="虚拟机" scheme="https://ma-b21.github.io/tags/%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
    <category term="VMware" scheme="https://ma-b21.github.io/tags/VMware/"/>
    
  </entry>
  
</feed>
